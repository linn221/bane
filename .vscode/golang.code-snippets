{
	// Place your Go-Htmx-Crud workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Inline error Handle": {
		"prefix": "eh",
		"body": [
			"if err := $0; err != nil {",
			"\treturn nil, err",
			"}",
		],
		"description": "Log output to console"
	},
	"pnaic": {
		"prefix": "pnc",
		"body": [
			"panic(\"2d\")",
		],
	},
	"Inline error Handle validate#2": {
		"prefix": "ev",
		"body": [
			"if err := $0; err != nil {",
			"\treturn err",
			"}",
		],
		"description": "Log output to console"
	},
	"Inline error Handle validate#2s": {
		"prefix": "evs",
		"body": [
			"if errs := $0; errs != nil {",
			"\treturn errs.Respond(w)",
			"}",
		],
		"description": "Log output to console"
	},
	"Error Handle": {
		"prefix": "rnil",
		"body": [
			"if err != nil {",
			"\treturn nil, err",
			"}",
		],
	},
	"Error Handleee": {
		"prefix": "rnill",
		"body": [
			"if err != nil {",
			"\treturn err",
			"}",
		],
	},
	"New Snippet": {
		"prefix": "snip",
		"body": [
			"\t\"new snippettt\": {",
			"\t\t\"prefix\": \"$1\",",
			"\t\t\"body\": [",
			"$0",
			"\t\t],",
			"\t},",
		],
	},
	"My handler": {
		"prefix": "myhandle",
		"body": [
			"func $0(w http.ResponseWriter, r *http.Request, renderer *views.Renderer, container *MyRequest) error {",
			"\tpanic(\"not implemented\") //2d",
			"}",
		],
		"description": "Log output to console"
	},
	"new snippsettt": {
		"prefix": "ison",
		"body": [
			"`json:\"$1\" validate:\"$0\"`"
		],
	},
	"new snippsetttss": {
		"prefix": "json",
		"body": [
			"`json:\"$0\"`"
		],
	},
	"new snippettt": {
		"prefix": "hwithinput",
		"body": [
			"func $1(w http.ResponseWriter, r *http.Request, input *$2, userId int, shopId string, db *gorm.DB, cache services.CacheService) error {",
			"$0",
			"}"
		],
	},
	"new snippettss": {
		"prefix": "details",
		"body": [
			"<details>",
			"<summary>$1</summary>",
			"$0",
			"</details>",
		],
	},
		"new snippettt label": {
			"prefix": "labell",
			"body": [
				"<label>$0</label>"
			],
		},
}