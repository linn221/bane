scalar WordType

type Word {
  id: UInt!
  word: String!
  wordType: WordType! # fuzz | attack
  description: String
  # tags: [Tag]
  # notes: [Note]
}

input NewWord {
  word: String!
  wordType: WordType! # fuzz | attack
  description: String
}

type WordList {
    id: UInt!
    name: String!
    description: String
    words: [Word!]
}

input NewWordList {
    name: String!
    description: String
}

type AllWordList {
    id: UInt!
    name: String!
    description: String
}

extend type Mutation {
  createWord(input: NewWord): Word!
  updateWord(id: UInt, input: NewWord): Word!
  deleteWord(id: UInt): Word!

  createWordList(input: NewWordList): WordList!
  updateWordList(id: UInt, input: NewWordList): WordList!
  deleteWordList(id: UInt): WordList!
}

extend type Query {
  getWord(id: UInt): Word!
  listWord(
    wordListId: UInt
    regex: String
    # tags
  ): [Word]!

  getWordList(id: UInt): WordList!
  listWordList(
    regex: String
    # tags
  ): [AllWordList]!
}
