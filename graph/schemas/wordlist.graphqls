scalar WordType

type Word {
  id: Int!
  word: String!
  alias: String
  wordType: WordType! # fuzz | attack
  description: String
  # tags: [Tag]
  # notes: [Note]
}

input NewWord {
  word: String!
  alias: String
  wordType: WordType! # fuzz | attack
  description: String
}

type WordList {
    id: Int!
    name: String!
    alias: String
    description: String
    words: [Word!]
    importUrl: String @goField(forceResolver: true)
}

input NewWordList {
    name: String!
    alias: String
    description: String
}

type AllWordList {
    id: Int!
    name: String!
    description: String
}

input PatchWord {
    word: String
    wordType: WordType
    description: String
}

input PatchWordList {
    name: String
    description: String
}

extend type Mutation {
  createWord(input: NewWord!): Word!
  updateWord(id: Int, alias: String, input: NewWord!): Word!
  patchWord(id: Int, alias: String, input: PatchWord!): Word!
  deleteWord(id: Int, alias: String): Word!

  createWordList(input: NewWordList!): WordList!
  updateWordList(id: Int, alias: String, input: NewWordList!): WordList!
  patchWordList(id: Int, alias: String, input: PatchWordList!): WordList!
  deleteWordList(id: Int, alias: String): WordList!
}

extend type Query {
  word(id: Int, alias: String): Word!
  words(search: String): [Word]

  getWordList(id: Int, alias: String): WordList!
  listWordList(
    regex: String
    # tags
  ): [AllWordList]!
}
