scalar MyTime

type SearchResult {
    results: [String!]
    count: Int
}

type Download {
    url: String!
}

type Note {
    value: String!
    match(regex: String!): SearchResult! @goField(forceResolver: true)
    noteDate: MyDate!
}

input NewNote {
    value: String!
    rId: Int
    referenceId: Int
    referenceType: String
}

type Tag {
    id: Int!
    alias: String!
    name: String!
    match(regex: String!): SearchResult! @goField(forceResolver: true)
    description: String
}

input NewTag {
    name: String!
    alias: String
    description: String
    priority: Int
}

input NoteFilter {
    rId: Int
    referenceId: Int
    referenceType: String
    noteDate: MyDate
    search: String
}


extend type Mutation {
    createTag(input: NewTag!): Tag!
    updateTag(id: Int!, input: NewTag!): Tag!
    deleteTag(id: Int!): Tag!
    newNote(input: NewNote): Note!
    delNote(id: Int!): Note!
}

extend type Query {
    tag(id: Int!): Tag!
    tags(search: String): [Tag]
    notes(filter: NoteFilter): [Note]
}