package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"

	"github.com/linn221/bane/graph"
	"github.com/linn221/bane/models"
	"github.com/linn221/bane/services"
	"github.com/linn221/bane/utils"
)

// CreateWord is the resolver for the createWord field.
func (r *mutationResolver) CreateWord(ctx context.Context, input models.NewWord) (*models.Word, error) {
	return services.WordCrud.Create(r.DB.WithContext(ctx), &input)
}

// UpdateWord is the resolver for the updateWord field.
func (r *mutationResolver) UpdateWord(ctx context.Context, id *int, alias *string, input models.NewWord) (*models.Word, error) {
	return services.WordCrud.Update(r.DB.WithContext(ctx), &input, id)
}

// PatchWord is the resolver for the patchWord field.
func (r *mutationResolver) PatchWord(ctx context.Context, id *int, alias *string, input models.PatchWord) (*models.Word, error) {
	updates := make(map[string]any)

	if input.Word != nil && *input.Word != "" {
		updates["word"] = *input.Word
	}
	if input.WordType != nil {
		updates["word_type"] = *input.WordType
	}
	if input.Description != nil && *input.Description != "" {
		updates["description"] = *input.Description
	}

	return services.WordCrud.Patch(r.DB.WithContext(ctx), updates, id)
}

// DeleteWord is the resolver for the deleteWord field.
func (r *mutationResolver) DeleteWord(ctx context.Context, id *int, alias *string) (*models.Word, error) {
	return services.WordCrud.Delete(r.DB.WithContext(ctx), id)
}

// CreateWordList is the resolver for the createWordList field.
func (r *mutationResolver) CreateWordList(ctx context.Context, input models.NewWordList) (*models.WordList, error) {
	return services.WordListCrud.Create(r.DB.WithContext(ctx), &input)
}

// UpdateWordList is the resolver for the updateWordList field.
func (r *mutationResolver) UpdateWordList(ctx context.Context, id *int, alias *string, input models.NewWordList) (*models.WordList, error) {
	return services.WordListCrud.Update(r.DB.WithContext(ctx), &input, id)
}

// PatchWordList is the resolver for the patchWordList field.
func (r *mutationResolver) PatchWordList(ctx context.Context, id *int, alias *string, input models.PatchWordList) (*models.WordList, error) {
	updates := make(map[string]any)

	if input.Name != nil && *input.Name != "" {
		updates["name"] = *input.Name
	}
	if input.Description != nil && *input.Description != "" {
		updates["description"] = *input.Description
	}

	return services.WordListCrud.Patch(r.DB.WithContext(ctx), updates, id)
}

// DeleteWordList is the resolver for the deleteWordList field.
func (r *mutationResolver) DeleteWordList(ctx context.Context, id *int, alias *string) (*models.WordList, error) {
	return services.WordListCrud.Delete(r.DB.WithContext(ctx), id)
}

// Word is the resolver for the word field.
func (r *queryResolver) Word(ctx context.Context, id *int, alias *string) (*models.Word, error) {
	return services.WordCrud.Get(r.DB.WithContext(ctx), id)
}

// Words is the resolver for the words field.
func (r *queryResolver) Words(ctx context.Context, search *string) ([]*models.Word, error) {
	var words []*models.Word
	dbctx := r.DB.WithContext(ctx).Model(&models.Word{})
	if search != nil {
		dbctx.Where("word LIKE ?", utils.SurroundPercentages(*search))
	}

	if err := dbctx.Order("word ASC").Find(&words).Error; err != nil {
		return nil, fmt.Errorf("failed to list words: %v", err)
	}
	return words, nil
}

// GetWordList is the resolver for the getWordList field.
func (r *queryResolver) GetWordList(ctx context.Context, id *int, alias *string) (*models.WordList, error) {
	return services.WordListCrud.Get(r.DB.WithContext(ctx), id)
}

// ListWordList is the resolver for the listWordList field.
func (r *queryResolver) ListWordList(ctx context.Context, regex *string) ([]*models.AllWordList, error) {
	panic(fmt.Errorf("not implemented: ListWordList - listWordList"))
}

// ImportURL is the resolver for the importUrl field.
func (r *wordListResolver) ImportURL(ctx context.Context, obj *models.WordList) (*string, error) {
	url := fmt.Sprintf("/importWordlist/%d", obj.Id)
	return &url, nil
}

// WordList returns graph.WordListResolver implementation.
func (r *Resolver) WordList() graph.WordListResolver { return &wordListResolver{r} }

type wordListResolver struct{ *Resolver }
