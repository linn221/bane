package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"

	"github.com/linn221/bane/graph"
	"github.com/linn221/bane/graph/model"
	"github.com/linn221/bane/models"
)

// CreateTag is the resolver for the createTag field.
func (r *mutationResolver) CreateTag(ctx context.Context, input models.NewTag) (*models.Tag, error) {
	return r.TagService.Create(ctx, &input)
}

// UpdateTag is the resolver for the updateTag field.
func (r *mutationResolver) UpdateTag(ctx context.Context, id models.UInt, input models.NewTag) (*models.Tag, error) {
	panic(fmt.Errorf("not implemented: UpdateTag - updateTag"))
}

// DeleteTag is the resolver for the deleteTag field.
func (r *mutationResolver) DeleteTag(ctx context.Context, id models.UInt) (*models.Tag, error) {
	panic(fmt.Errorf("not implemented: DeleteTag - deleteTag"))
}

// Match is the resolver for the match field.
func (r *noteResolver) Match(ctx context.Context, obj *model.Note, regex *string) (*model.SearchResult, error) {
	panic(fmt.Errorf("not implemented: Match - match"))
}

// Tag is the resolver for the tag field.
func (r *queryResolver) Tag(ctx context.Context, id models.UInt) (*models.Tag, error) {
	panic(fmt.Errorf("not implemented: Tag - tag"))
}

// Tags is the resolver for the tags field.
func (r *queryResolver) Tags(ctx context.Context, search *string) ([]*models.Tag, error) {
	panic(fmt.Errorf("not implemented: Tags - tags"))
}

// Match is the resolver for the match field.
func (r *tagResolver) Match(ctx context.Context, obj *models.Tag, regex *string) (*model.SearchResult, error) {
	panic(fmt.Errorf("not implemented: Match - match"))
}

// Note returns graph.NoteResolver implementation.
func (r *Resolver) Note() graph.NoteResolver { return &noteResolver{r} }

// Tag returns graph.TagResolver implementation.
func (r *Resolver) Tag() graph.TagResolver { return &tagResolver{r} }

type noteResolver struct{ *Resolver }
type tagResolver struct{ *Resolver }
