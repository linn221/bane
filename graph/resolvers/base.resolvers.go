package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"

	"github.com/linn221/bane/graph"
	"github.com/linn221/bane/graph/model"
	"github.com/linn221/bane/models"
	"github.com/linn221/bane/services"
)

// CreateTag is the resolver for the createTag field.
func (r *mutationResolver) CreateTag(ctx context.Context, input models.NewTag) (*models.Tag, error) {
	return services.TagCrud.Create(r.DB, &input)
}

// UpdateTag is the resolver for the updateTag field.
func (r *mutationResolver) UpdateTag(ctx context.Context, id *int, alias *string, input models.NewTag) (*models.Tag, error) {
	return services.TagCrud.Update(r.DB.WithContext(ctx), &input, id)
}

// PatchTag is the resolver for the patchTag field.
func (r *mutationResolver) PatchTag(ctx context.Context, id *int, alias *string, input models.PatchTag) (*models.Tag, error) {
	updates := make(map[string]any)

	if input.Name != nil && *input.Name != "" {
		updates["name"] = *input.Name
	}
	if input.Alias != nil && *input.Alias != "" {
		updates["alias"] = *input.Alias
	}
	if input.Description != nil && *input.Description != "" {
		updates["description"] = *input.Description
	}
	if input.Priority != nil {
		updates["priority"] = *input.Priority
	}

	return services.TagCrud.Patch(r.DB.WithContext(ctx), updates, id)
}

// DeleteTag is the resolver for the deleteTag field.
func (r *mutationResolver) DeleteTag(ctx context.Context, id *int, alias *string) (*models.Tag, error) {
	return services.TagCrud.Delete(r.DB.WithContext(ctx), id)
}

// Tag is the resolver for the tag field.
func (r *queryResolver) Tag(ctx context.Context, id *int, alias *string) (*models.Tag, error) {
	return services.TagCrud.Get(r.DB.WithContext(ctx), id)
}

// Tags is the resolver for the tags field.
func (r *queryResolver) Tags(ctx context.Context, search *string) ([]*models.Tag, error) {
	dbctx := r.DB.WithContext(ctx).Model(models.Tag{}).Where("is_active = 1")
	var results []*models.Tag
	err := dbctx.Find(&results).Error
	return results, err
}

// Match is the resolver for the match field.
func (r *tagResolver) Match(ctx context.Context, obj *models.Tag, regex string) (*model.SearchResult, error) {
	return services.MatchRegex(obj, regex)
}

// Tag returns graph.TagResolver implementation.
func (r *Resolver) Tag() graph.TagResolver { return &tagResolver{r} }

type tagResolver struct{ *Resolver }
