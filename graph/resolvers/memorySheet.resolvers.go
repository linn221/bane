package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"

	"github.com/linn221/bane/graph"
	"github.com/linn221/bane/graph/model"
	"github.com/linn221/bane/models"
	"github.com/linn221/bane/services"
)

// CreateDate is the resolver for the createDate field.
func (r *memorySheetResolver) CreateDate(ctx context.Context, obj *models.MemorySheet) (*models.MyDate, error) {
	myDate := &models.MyDate{Time: obj.CreateDate}
	return myDate, nil
}

// CurrentDate is the resolver for the currentDate field.
func (r *memorySheetResolver) CurrentDate(ctx context.Context, obj *models.MemorySheet) (*models.MyDate, error) {
	myDate := &models.MyDate{Time: obj.CurrentDate}
	return myDate, nil
}

// NextDate is the resolver for the nextDate field.
func (r *memorySheetResolver) NextDate(ctx context.Context, obj *models.MemorySheet) (*models.MyDate, error) {
	myDate := &models.MyDate{Time: obj.NextDate}
	return myDate, nil
}

// Notes is the resolver for the notes field.
func (r *memorySheetResolver) Notes(ctx context.Context, obj *models.MemorySheet) ([]*model.Note, error) {
	// TODO: Implement notes relationship when Note model is available
	return []*model.Note{}, nil
}

// CreateMemorySheet is the resolver for the createMemorySheet field.
func (r *mutationResolver) CreateMemorySheet(ctx context.Context, input models.NewMemorySheet) (*models.MemorySheet, error) {
	return services.MemorySheetCrud.Create(r.DB.WithContext(ctx), input)
}

// UpdateMemorySheet is the resolver for the updateMemorySheet field.
func (r *mutationResolver) UpdateMemorySheet(ctx context.Context, id int, input models.NewMemorySheet) (*models.MemorySheet, error) {
	return services.MemorySheetCrud.Update(r.DB.WithContext(ctx), input, id)
}

// DeleteMemorySheet is the resolver for the deleteMemorySheet field.
func (r *mutationResolver) DeleteMemorySheet(ctx context.Context, id int) (*models.MemorySheet, error) {
	return services.MemorySheetCrud.Delete(r.DB.WithContext(ctx), id)
}

// MemorySheet is the resolver for the memorySheet field.
func (r *queryResolver) MemorySheet(ctx context.Context, id int) (*models.MemorySheet, error) {
	return services.MemorySheetCrud.Get(r.DB.WithContext(ctx), id)
}

// MSheets is the resolver for the mSheets field.
func (r *queryResolver) MSheets(ctx context.Context, date models.MyDate) ([]*models.MemorySheet, error) {
	nextSheets, err := getMemorySheetsByNextDate(r.DB.WithContext(ctx), date.Time)
	if err != nil {
		return nil, err
	}
	tx := r.DB.WithContext(ctx).Begin()
	defer tx.Rollback()
	for _, nSheet := range nextSheets {
		_, err := services.MemorySheetCrud.Update(tx, models.NewMemorySheet{UpdateNextDate: true}, nSheet.Id)
		if err != nil {
			return nil, err
		}
	}
	if err := tx.Commit().Error; err != nil {
		return nil, err
	}
	currentSheets, err := getMemorySheetsByCurrentDate(r.DB.WithContext(ctx), date.Time)
	if err != nil {
		return nil, err
	}
	return currentSheets, err
}

// NextDay is the resolver for the nextDay field.
func (r *todayMemorySheetResolver) NextDay(ctx context.Context, obj *model.TodayMemorySheet) ([]*models.MemorySheet, error) {
	// TODO: Implement next day logic
	return []*models.MemorySheet{}, nil
}

// NextMonth is the resolver for the nextMonth field.
func (r *todayMemorySheetResolver) NextMonth(ctx context.Context, obj *model.TodayMemorySheet) ([]*models.MemorySheet, error) {
	// TODO: Implement next month logic
	return []*models.MemorySheet{}, nil
}

// ThisWeek is the resolver for the thisWeek field.
func (r *todayMemorySheetResolver) ThisWeek(ctx context.Context, obj *model.TodayMemorySheet) ([]*models.MemorySheet, error) {
	// TODO: Implement this week logic
	return []*models.MemorySheet{}, nil
}

// ThisMonth is the resolver for the thisMonth field.
func (r *todayMemorySheetResolver) ThisMonth(ctx context.Context, obj *model.TodayMemorySheet) ([]*models.MemorySheet, error) {
	// TODO: Implement this month logic
	return []*models.MemorySheet{}, nil
}

// MemorySheet returns graph.MemorySheetResolver implementation.
func (r *Resolver) MemorySheet() graph.MemorySheetResolver { return &memorySheetResolver{r} }

// TodayMemorySheet returns graph.TodayMemorySheetResolver implementation.
func (r *Resolver) TodayMemorySheet() graph.TodayMemorySheetResolver {
	return &todayMemorySheetResolver{r}
}

type memorySheetResolver struct{ *Resolver }
type todayMemorySheetResolver struct{ *Resolver }
