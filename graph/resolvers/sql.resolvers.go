package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"
	"strings"

	"github.com/linn221/bane/graph"
	"github.com/linn221/bane/graph/model"
)

// DelID is the resolver for the delId field.
func (r *sQLResolver) DelID(ctx context.Context, obj *model.SQL, table string, id int) (*model.SQLResult, error) {
	panic(fmt.Errorf("not implemented: DelID - delId"))
}

// DelRid is the resolver for the delRid field.
func (r *sQLResolver) DelRid(ctx context.Context, obj *model.SQL, rID int) (*model.SQLResult, error) {
	panic(fmt.Errorf("not implemented: DelRid - delRid"))
}

// Del is the resolver for the del field.
func (r *sQLResolver) Del(ctx context.Context, obj *model.SQL, table string, where string) (*model.SQLResult, error) {
	if strings.TrimSpace(where) == "" {
		return nil, fmt.Errorf("where is required")
	}
	sql := fmt.Sprintf("DELETE FROM %s WHERE %s", table, where)
	err := r.DB.WithContext(ctx).Exec(sql).Error
	if err != nil {
		return nil, err
	}
	return nil, nil
}

// Count is the resolver for the count field.
func (r *sQLResolver) Count(ctx context.Context, obj *model.SQL, table string, where string) (*model.SQLResult, error) {
	panic(fmt.Errorf("not implemented: Count - count"))
}

// SQL returns graph.SQLResolver implementation.
func (r *Resolver) SQL() graph.SQLResolver { return &sQLResolver{r} }

type sQLResolver struct{ *Resolver }
