package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"

	"github.com/linn221/bane/graph"
	"github.com/linn221/bane/models"
	"github.com/linn221/bane/mystructs"
	"github.com/linn221/bane/services"
)

// RunCurl is the resolver for the runCurl field.
func (r *mutationResolver) RunCurl(ctx context.Context, endpointAlias string, variables string) (*models.MyRequest, error) {
	var kv mystructs.KVGroup
	if err := kv.UnmarshalGQL(variables); err != nil {
		return nil, err
	}
	vkg := mystructs.VarKVGroup{VarKVs: make([]mystructs.VarKV, 0, len(kv.KVPairs))}
	for _, p := range kv.KVPairs {
		keyVS, _ := mystructs.NewVarString(p.Key)
		valVS, _ := mystructs.NewVarString(p.Value)
		vkg.VarKVs = append(vkg.VarKVs, mystructs.VarKV{Key: *keyVS, Value: *valVS})
	}
	return services.MyRequestService.ExecuteCurl(r.app, r.DB.WithContext(ctx), endpointAlias, vkg)
}

// Program is the resolver for the program field.
func (r *myRequestResolver) Program(ctx context.Context, obj *models.MyRequest) (*models.Program, error) {
	var program models.Program
	err := r.DB.First(&program, obj.ProgramId).Error
	return &program, err
}

// Endpoint is the resolver for the endpoint field.
func (r *myRequestResolver) Endpoint(ctx context.Context, obj *models.MyRequest) (*models.Endpoint, error) {
	var endpoint models.Endpoint
	err := r.DB.First(&endpoint, obj.EndpointId).Error
	return &endpoint, err
}

// ExecutedAt is the resolver for the executedAt field.
func (r *myRequestResolver) ExecutedAt(ctx context.Context, obj *models.MyRequest) (string, error) {
	return obj.ExecutedAt.Format("2006-01-02T15:04:05Z07:00"), nil
}

// MyRequests is the resolver for the myRequests field.
func (r *queryResolver) MyRequests(ctx context.Context, filter *models.MyRequestFilter) ([]*models.MyRequest, error) {
	return services.MyRequestService.ListMyRequests(r.DB.WithContext(ctx), filter)
}

// MyRequest is the resolver for the myRequest field.
func (r *queryResolver) MyRequest(ctx context.Context, id int) (*models.MyRequest, error) {
	return services.MyRequestService.GetMyRequestByID(r.DB.WithContext(ctx), &id)
}

// MyRequest returns graph.MyRequestResolver implementation.
func (r *Resolver) MyRequest() graph.MyRequestResolver { return &myRequestResolver{r} }

type myRequestResolver struct{ *Resolver }
