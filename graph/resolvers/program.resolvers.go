package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"

	"github.com/linn221/bane/graph"
	"github.com/linn221/bane/graph/model"
	"github.com/linn221/bane/models"
	"github.com/linn221/bane/services"
)

// CreateProgram is the resolver for the createProgram field.
func (r *mutationResolver) CreateProgram(ctx context.Context, input *models.NewProgram) (*models.Program, error) {
	return services.ProgramCrud.Create(r.DB.WithContext(ctx), *input)
}

// UpdateProgram is the resolver for the updateProgram field.
func (r *mutationResolver) UpdateProgram(ctx context.Context, id *int, input *models.NewProgram) (*models.Program, error) {
	return services.ProgramCrud.Update(r.DB.WithContext(ctx), *input, *id)
}

// DeleteProgram is the resolver for the deleteProgram field.
func (r *mutationResolver) DeleteProgram(ctx context.Context, id *int) (*models.Program, error) {
	return services.ProgramCrud.Delete(r.DB.WithContext(ctx), *id)
}

// Match is the resolver for the match field.
func (r *programResolver) Match(ctx context.Context, obj *models.Program, regex string) (*model.SearchResult, error) {
	panic(fmt.Errorf("not implemented: Match - match"))
}

// GetProgram is the resolver for the getProgram field.
func (r *queryResolver) GetProgram(ctx context.Context, id *int) (*models.Program, error) {
	// Note: This returns WordList but should probably return Program based on the schema
	// For now, returning a placeholder WordList as per the current schema
	return services.ProgramCrud.Get(r.DB.WithContext(ctx), *id)
}

// ListProgram is the resolver for the listProgram field.
func (r *queryResolver) ListProgram(ctx context.Context, search *string) ([]*models.AllProgram, error) {
	return services.ListPrograms(r.DB.WithContext(ctx), search)
}

// Program returns graph.ProgramResolver implementation.
func (r *Resolver) Program() graph.ProgramResolver { return &programResolver{r} }

type programResolver struct{ *Resolver }
