package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"

	"github.com/linn221/bane/graph"
	"github.com/linn221/bane/graph/model"
	"github.com/linn221/bane/models"
)

// CreateProgram is the resolver for the createProgram field.
func (r *mutationResolver) CreateProgram(ctx context.Context, input *model.NewProgram) (*models.Program, error) {
	panic(fmt.Errorf("not implemented: CreateProgram - createProgram"))
}

// UpdateProgram is the resolver for the updateProgram field.
func (r *mutationResolver) UpdateProgram(ctx context.Context, id *models.UInt, input *model.NewProgram) (*models.Program, error) {
	panic(fmt.Errorf("not implemented: UpdateProgram - updateProgram"))
}

// DeleteProgram is the resolver for the deleteProgram field.
func (r *mutationResolver) DeleteProgram(ctx context.Context, id *models.UInt) (*models.Program, error) {
	panic(fmt.Errorf("not implemented: DeleteProgram - deleteProgram"))
}

// ID is the resolver for the id field.
func (r *programResolver) ID(ctx context.Context, obj *models.Program) (models.UInt, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// GetProgram is the resolver for the getProgram field.
func (r *queryResolver) GetProgram(ctx context.Context, id *models.UInt) (*model.WordList, error) {
	panic(fmt.Errorf("not implemented: GetProgram - getProgram"))
}

// ListProgram is the resolver for the listProgram field.
func (r *queryResolver) ListProgram(ctx context.Context, search *string) ([]*model.AllProgram, error) {
	panic(fmt.Errorf("not implemented: ListProgram - listProgram"))
}

// Program returns graph.ProgramResolver implementation.
func (r *Resolver) Program() graph.ProgramResolver { return &programResolver{r} }

type programResolver struct{ *Resolver }
