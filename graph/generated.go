// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"bytes"
	"context"
	"embed"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/linn221/bane/graph/model"
	"github.com/linn221/bane/models"
	"github.com/linn221/bane/mystructs"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Endpoint() EndpointResolver
	MemorySheet() MemorySheetResolver
	Mutation() MutationResolver
	MyRequest() MyRequestResolver
	Note() NoteResolver
	Program() ProgramResolver
	Query() QueryResolver
	QueryResult() QueryResultResolver
	SQL() SQLResolver
	Tag() TagResolver
	TodayMemorySheet() TodayMemorySheetResolver
	WordList() WordListResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	AllWordList struct {
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
	}

	CurlImportResult struct {
		Description         func(childComplexity int) int
		HttpBody            func(childComplexity int) int
		HttpCookies         func(childComplexity int) int
		HttpDomain          func(childComplexity int) int
		HttpFollowRedirects func(childComplexity int) int
		HttpHeaders         func(childComplexity int) int
		HttpMethod          func(childComplexity int) int
		HttpPath            func(childComplexity int) int
		HttpPort            func(childComplexity int) int
		HttpQueries         func(childComplexity int) int
		HttpSchema          func(childComplexity int) int
		HttpTimeout         func(childComplexity int) int
		Name                func(childComplexity int) int
		ProgramAlias        func(childComplexity int) int
	}

	Download struct {
		URL func(childComplexity int) int
	}

	Endpoint struct {
		Alias               func(childComplexity int) int
		Curl                func(childComplexity int, variables *string) int
		Description         func(childComplexity int) int
		HTTPBodyMy          func(childComplexity int) int
		HTTPCookiesMy       func(childComplexity int, sep *string, limit *int) int
		HTTPHeadersMy       func(childComplexity int, sep *string, limit *int) int
		HTTPPathMy          func(childComplexity int, sep *string) int
		HTTPQueriesMy       func(childComplexity int, sep *string, limit *int) int
		HttpBody            func(childComplexity int) int
		HttpCookies         func(childComplexity int) int
		HttpDomain          func(childComplexity int) int
		HttpFollowRedirects func(childComplexity int) int
		HttpHeaders         func(childComplexity int) int
		HttpMethod          func(childComplexity int) int
		HttpPath            func(childComplexity int) int
		HttpPort            func(childComplexity int) int
		HttpQueries         func(childComplexity int) int
		HttpSchema          func(childComplexity int) int
		HttpTimeout         func(childComplexity int) int
		Id                  func(childComplexity int) int
		Match               func(childComplexity int, regex string) int
		Name                func(childComplexity int) int
		Notes               func(childComplexity int) int
		Program             func(childComplexity int) int
		ProgramId           func(childComplexity int) int
		Rid                 func(childComplexity int) int
	}

	MemorySheet struct {
		Alias       func(childComplexity int) int
		CreateDate  func(childComplexity int) int
		CurrentDate func(childComplexity int) int
		Id          func(childComplexity int) int
		NextDate    func(childComplexity int) int
		Notes       func(childComplexity int) int
		Value       func(childComplexity int) int
	}

	Mutation struct {
		CreateMemorySheet func(childComplexity int, input models.NewMemorySheet) int
		CreateTag         func(childComplexity int, input models.NewTag) int
		CreateWord        func(childComplexity int, input models.NewWord) int
		CreateWordList    func(childComplexity int, input models.NewWordList) int
		DelNote           func(childComplexity int, id int) int
		DeleteEndpoint    func(childComplexity int, id *int, alias *string) int
		DeleteMemorySheet func(childComplexity int, id *int, alias *string) int
		DeleteProgram     func(childComplexity int, id *int, alias *string) int
		DeleteTag         func(childComplexity int, id *int, alias *string) int
		DeleteWord        func(childComplexity int, id *int, alias *string) int
		DeleteWordList    func(childComplexity int, id *int, alias *string) int
		Helloworld        func(childComplexity int) int
		ImportCurl        func(childComplexity int, curl string) int
		NewEndpoint       func(childComplexity int, input models.NewEndpoint) int
		NewNote           func(childComplexity int, input *models.NewNote) int
		NewProgram        func(childComplexity int, input *models.NewProgram) int
		PatchEndpoint     func(childComplexity int, id *int, alias *string, input models.PatchEndpoint) int
		PatchMemorySheet  func(childComplexity int, id *int, alias *string, input models.PatchMemorySheet) int
		PatchProgram      func(childComplexity int, id *int, alias *string, input models.PatchProgram) int
		PatchTag          func(childComplexity int, id *int, alias *string, input models.PatchTag) int
		PatchWord         func(childComplexity int, id *int, alias *string, input models.PatchWord) int
		PatchWordList     func(childComplexity int, id *int, alias *string, input models.PatchWordList) int
		Raw               func(childComplexity int, sql string) int
		RunCurl           func(childComplexity int, endpointAlias string, variables string) int
		UpdateEndpoint    func(childComplexity int, id *int, alias *string, input models.NewEndpoint) int
		UpdateMemorySheet func(childComplexity int, id *int, alias *string, input models.NewMemorySheet) int
		UpdateProgram     func(childComplexity int, id *int, alias *string, input models.NewProgram) int
		UpdateTag         func(childComplexity int, id *int, alias *string, input models.NewTag) int
		UpdateWord        func(childComplexity int, id *int, alias *string, input models.NewWord) int
		UpdateWordList    func(childComplexity int, id *int, alias *string, input models.NewWordList) int
	}

	MyRequest struct {
		ContentLength   func(childComplexity int) int
		ContentType     func(childComplexity int) int
		CurlCommand     func(childComplexity int) int
		Endpoint        func(childComplexity int) int
		EndpointId      func(childComplexity int) int
		Error           func(childComplexity int) int
		ExecutedAt      func(childComplexity int) int
		Id              func(childComplexity int) int
		Latency         func(childComplexity int) int
		Program         func(childComplexity int) int
		ProgramId       func(childComplexity int) int
		RequestBody     func(childComplexity int) int
		RequestHeaders  func(childComplexity int) int
		RequestMethod   func(childComplexity int) int
		RequestUrl      func(childComplexity int) int
		ResponseBody    func(childComplexity int) int
		ResponseHeaders func(childComplexity int) int
		ResponseStatus  func(childComplexity int) int
		Size            func(childComplexity int) int
		Success         func(childComplexity int) int
		Variables       func(childComplexity int) int
	}

	Note struct {
		Id       func(childComplexity int) int
		Match    func(childComplexity int, regex string) int
		NoteDate func(childComplexity int) int
		Value    func(childComplexity int) int
	}

	Program struct {
		Alias       func(childComplexity int) int
		Description func(childComplexity int) int
		Domain      func(childComplexity int) int
		Id          func(childComplexity int) int
		Match       func(childComplexity int, regex string) int
		Name        func(childComplexity int) int
		Notes       func(childComplexity int) int
		Rid         func(childComplexity int) int
		Url         func(childComplexity int) int
	}

	Query struct {
		Endpoint     func(childComplexity int, id *int, alias *string) int
		Endpoints    func(childComplexity int, filter *models.EndpointFilter) int
		GetWordList  func(childComplexity int, id *int, alias *string) int
		Helloworld   func(childComplexity int) int
		ListWordList func(childComplexity int, regex *string) int
		MSheets      func(childComplexity int, date *models.MyDate) int
		MemorySheet  func(childComplexity int, id *int, alias *string) int
		MyRequest    func(childComplexity int, id int) int
		MyRequests   func(childComplexity int, filter *models.MyRequestFilter) int
		Notes        func(childComplexity int, filter *models.NoteFilter) int
		Program      func(childComplexity int, id *int, alias *string) int
		Programs     func(childComplexity int, search *string) int
		Raw          func(childComplexity int, sql string) int
		Tag          func(childComplexity int, id *int, alias *string) int
		Tags         func(childComplexity int, search *string) int
		Word         func(childComplexity int, id *int, alias *string) int
		Words        func(childComplexity int, search *string) int
	}

	QueryResult struct {
		Count   func(childComplexity int) int
		Results func(childComplexity int, sep *string, limit *int) int
	}

	SQL struct {
		Count  func(childComplexity int, table string, where string) int
		Del    func(childComplexity int, table string, where string) int
		DelID  func(childComplexity int, table string, id int) int
		DelRid func(childComplexity int, rID int) int
	}

	SQLResult struct {
		Count   func(childComplexity int) int
		Success func(childComplexity int) int
	}

	SearchResult struct {
		Count   func(childComplexity int) int
		Results func(childComplexity int) int
	}

	Tag struct {
		Alias       func(childComplexity int) int
		Description func(childComplexity int) int
		Id          func(childComplexity int) int
		Match       func(childComplexity int, regex string) int
		Name        func(childComplexity int) int
	}

	TodayMemorySheet struct {
		NextDay   func(childComplexity int) int
		NextMonth func(childComplexity int) int
		Sheets    func(childComplexity int) int
		ThisMonth func(childComplexity int) int
		ThisWeek  func(childComplexity int) int
		Today     func(childComplexity int) int
	}

	Word struct {
		Alias       func(childComplexity int) int
		Description func(childComplexity int) int
		Id          func(childComplexity int) int
		Word        func(childComplexity int) int
		WordType    func(childComplexity int) int
	}

	WordList struct {
		Alias       func(childComplexity int) int
		Description func(childComplexity int) int
		Id          func(childComplexity int) int
		ImportURL   func(childComplexity int) int
		Name        func(childComplexity int) int
		Words       func(childComplexity int) int
	}
}

type EndpointResolver interface {
	Program(ctx context.Context, obj *models.Endpoint) (*models.Program, error)

	HTTPPathMy(ctx context.Context, obj *models.Endpoint, sep *string) (string, error)
	HTTPQueriesMy(ctx context.Context, obj *models.Endpoint, sep *string, limit *int) (string, error)
	HTTPHeadersMy(ctx context.Context, obj *models.Endpoint, sep *string, limit *int) (string, error)
	HTTPCookiesMy(ctx context.Context, obj *models.Endpoint, sep *string, limit *int) (string, error)
	HTTPBodyMy(ctx context.Context, obj *models.Endpoint) (string, error)
	Match(ctx context.Context, obj *models.Endpoint, regex string) (*model.SearchResult, error)
	Curl(ctx context.Context, obj *models.Endpoint, variables *string) (string, error)
	Rid(ctx context.Context, obj *models.Endpoint) (int, error)
	Notes(ctx context.Context, obj *models.Endpoint) ([]*models.Note, error)
}
type MemorySheetResolver interface {
	CreateDate(ctx context.Context, obj *models.MemorySheet) (*models.MyDate, error)
	CurrentDate(ctx context.Context, obj *models.MemorySheet) (*models.MyDate, error)
	NextDate(ctx context.Context, obj *models.MemorySheet) (*models.MyDate, error)
	Notes(ctx context.Context, obj *models.MemorySheet) ([]*models.Note, error)
}
type MutationResolver interface {
	Helloworld(ctx context.Context) (string, error)
	CreateTag(ctx context.Context, input models.NewTag) (*models.Tag, error)
	UpdateTag(ctx context.Context, id *int, alias *string, input models.NewTag) (*models.Tag, error)
	PatchTag(ctx context.Context, id *int, alias *string, input models.PatchTag) (*models.Tag, error)
	DeleteTag(ctx context.Context, id *int, alias *string) (*models.Tag, error)
	NewEndpoint(ctx context.Context, input models.NewEndpoint) (*models.Endpoint, error)
	UpdateEndpoint(ctx context.Context, id *int, alias *string, input models.NewEndpoint) (*models.Endpoint, error)
	PatchEndpoint(ctx context.Context, id *int, alias *string, input models.PatchEndpoint) (*models.Endpoint, error)
	DeleteEndpoint(ctx context.Context, id *int, alias *string) (*models.Endpoint, error)
	ImportCurl(ctx context.Context, curl string) (*models.CurlImportResult, error)
	CreateMemorySheet(ctx context.Context, input models.NewMemorySheet) (*models.MemorySheet, error)
	UpdateMemorySheet(ctx context.Context, id *int, alias *string, input models.NewMemorySheet) (*models.MemorySheet, error)
	PatchMemorySheet(ctx context.Context, id *int, alias *string, input models.PatchMemorySheet) (*models.MemorySheet, error)
	DeleteMemorySheet(ctx context.Context, id *int, alias *string) (*models.MemorySheet, error)
	RunCurl(ctx context.Context, endpointAlias string, variables string) (*models.MyRequest, error)
	NewNote(ctx context.Context, input *models.NewNote) (*models.Note, error)
	DelNote(ctx context.Context, id int) (*models.Note, error)
	NewProgram(ctx context.Context, input *models.NewProgram) (*models.Program, error)
	UpdateProgram(ctx context.Context, id *int, alias *string, input models.NewProgram) (*models.Program, error)
	PatchProgram(ctx context.Context, id *int, alias *string, input models.PatchProgram) (*models.Program, error)
	DeleteProgram(ctx context.Context, id *int, alias *string) (*models.Program, error)
	Raw(ctx context.Context, sql string) (int, error)
	CreateWord(ctx context.Context, input models.NewWord) (*models.Word, error)
	UpdateWord(ctx context.Context, id *int, alias *string, input models.NewWord) (*models.Word, error)
	PatchWord(ctx context.Context, id *int, alias *string, input models.PatchWord) (*models.Word, error)
	DeleteWord(ctx context.Context, id *int, alias *string) (*models.Word, error)
	CreateWordList(ctx context.Context, input models.NewWordList) (*models.WordList, error)
	UpdateWordList(ctx context.Context, id *int, alias *string, input models.NewWordList) (*models.WordList, error)
	PatchWordList(ctx context.Context, id *int, alias *string, input models.PatchWordList) (*models.WordList, error)
	DeleteWordList(ctx context.Context, id *int, alias *string) (*models.WordList, error)
}
type MyRequestResolver interface {
	Program(ctx context.Context, obj *models.MyRequest) (*models.Program, error)

	Endpoint(ctx context.Context, obj *models.MyRequest) (*models.Endpoint, error)

	ExecutedAt(ctx context.Context, obj *models.MyRequest) (string, error)
}
type NoteResolver interface {
	Match(ctx context.Context, obj *models.Note, regex string) (*model.SearchResult, error)
}
type ProgramResolver interface {
	Match(ctx context.Context, obj *models.Program, regex string) (*model.SearchResult, error)
	Rid(ctx context.Context, obj *models.Program) (int, error)
	Notes(ctx context.Context, obj *models.Program) ([]*models.Note, error)
}
type QueryResolver interface {
	Helloworld(ctx context.Context) (string, error)
	Tag(ctx context.Context, id *int, alias *string) (*models.Tag, error)
	Tags(ctx context.Context, search *string) ([]*models.Tag, error)
	Endpoint(ctx context.Context, id *int, alias *string) (*models.Endpoint, error)
	Endpoints(ctx context.Context, filter *models.EndpointFilter) ([]*models.Endpoint, error)
	MemorySheet(ctx context.Context, id *int, alias *string) (*models.MemorySheet, error)
	MSheets(ctx context.Context, date *models.MyDate) ([]*models.MemorySheet, error)
	MyRequests(ctx context.Context, filter *models.MyRequestFilter) ([]*models.MyRequest, error)
	MyRequest(ctx context.Context, id int) (*models.MyRequest, error)
	Notes(ctx context.Context, filter *models.NoteFilter) ([]*models.Note, error)
	Programs(ctx context.Context, search *string) ([]*models.Program, error)
	Program(ctx context.Context, id *int, alias *string) (*models.Program, error)
	Raw(ctx context.Context, sql string) (*models.QueryResult, error)
	Word(ctx context.Context, id *int, alias *string) (*models.Word, error)
	Words(ctx context.Context, search *string) ([]*models.Word, error)
	GetWordList(ctx context.Context, id *int, alias *string) (*models.WordList, error)
	ListWordList(ctx context.Context, regex *string) ([]*models.AllWordList, error)
}
type QueryResultResolver interface {
	Results(ctx context.Context, obj *models.QueryResult, sep *string, limit *int) ([]*string, error)
}
type SQLResolver interface {
	DelID(ctx context.Context, obj *model.SQL, table string, id int) (*model.SQLResult, error)
	DelRid(ctx context.Context, obj *model.SQL, rID int) (*model.SQLResult, error)
	Del(ctx context.Context, obj *model.SQL, table string, where string) (*model.SQLResult, error)
	Count(ctx context.Context, obj *model.SQL, table string, where string) (*model.SQLResult, error)
}
type TagResolver interface {
	Match(ctx context.Context, obj *models.Tag, regex string) (*model.SearchResult, error)
}
type TodayMemorySheetResolver interface {
	NextDay(ctx context.Context, obj *model.TodayMemorySheet) ([]*models.MemorySheet, error)
	NextMonth(ctx context.Context, obj *model.TodayMemorySheet) ([]*models.MemorySheet, error)
	ThisWeek(ctx context.Context, obj *model.TodayMemorySheet) ([]*models.MemorySheet, error)
	ThisMonth(ctx context.Context, obj *model.TodayMemorySheet) ([]*models.MemorySheet, error)
}
type WordListResolver interface {
	ImportURL(ctx context.Context, obj *models.WordList) (*string, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(ctx context.Context, typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "AllWordList.description":
		if e.complexity.AllWordList.Description == nil {
			break
		}

		return e.complexity.AllWordList.Description(childComplexity), true
	case "AllWordList.id":
		if e.complexity.AllWordList.ID == nil {
			break
		}

		return e.complexity.AllWordList.ID(childComplexity), true
	case "AllWordList.name":
		if e.complexity.AllWordList.Name == nil {
			break
		}

		return e.complexity.AllWordList.Name(childComplexity), true

	case "CurlImportResult.description":
		if e.complexity.CurlImportResult.Description == nil {
			break
		}

		return e.complexity.CurlImportResult.Description(childComplexity), true
	case "CurlImportResult.httpBody":
		if e.complexity.CurlImportResult.HttpBody == nil {
			break
		}

		return e.complexity.CurlImportResult.HttpBody(childComplexity), true
	case "CurlImportResult.httpCookies":
		if e.complexity.CurlImportResult.HttpCookies == nil {
			break
		}

		return e.complexity.CurlImportResult.HttpCookies(childComplexity), true
	case "CurlImportResult.httpDomain":
		if e.complexity.CurlImportResult.HttpDomain == nil {
			break
		}

		return e.complexity.CurlImportResult.HttpDomain(childComplexity), true
	case "CurlImportResult.httpFollowRedirects":
		if e.complexity.CurlImportResult.HttpFollowRedirects == nil {
			break
		}

		return e.complexity.CurlImportResult.HttpFollowRedirects(childComplexity), true
	case "CurlImportResult.httpHeaders":
		if e.complexity.CurlImportResult.HttpHeaders == nil {
			break
		}

		return e.complexity.CurlImportResult.HttpHeaders(childComplexity), true
	case "CurlImportResult.httpMethod":
		if e.complexity.CurlImportResult.HttpMethod == nil {
			break
		}

		return e.complexity.CurlImportResult.HttpMethod(childComplexity), true
	case "CurlImportResult.httpPath":
		if e.complexity.CurlImportResult.HttpPath == nil {
			break
		}

		return e.complexity.CurlImportResult.HttpPath(childComplexity), true
	case "CurlImportResult.httpPort":
		if e.complexity.CurlImportResult.HttpPort == nil {
			break
		}

		return e.complexity.CurlImportResult.HttpPort(childComplexity), true
	case "CurlImportResult.httpQueries":
		if e.complexity.CurlImportResult.HttpQueries == nil {
			break
		}

		return e.complexity.CurlImportResult.HttpQueries(childComplexity), true
	case "CurlImportResult.httpSchema":
		if e.complexity.CurlImportResult.HttpSchema == nil {
			break
		}

		return e.complexity.CurlImportResult.HttpSchema(childComplexity), true
	case "CurlImportResult.httpTimeout":
		if e.complexity.CurlImportResult.HttpTimeout == nil {
			break
		}

		return e.complexity.CurlImportResult.HttpTimeout(childComplexity), true
	case "CurlImportResult.name":
		if e.complexity.CurlImportResult.Name == nil {
			break
		}

		return e.complexity.CurlImportResult.Name(childComplexity), true
	case "CurlImportResult.programAlias":
		if e.complexity.CurlImportResult.ProgramAlias == nil {
			break
		}

		return e.complexity.CurlImportResult.ProgramAlias(childComplexity), true

	case "Download.url":
		if e.complexity.Download.URL == nil {
			break
		}

		return e.complexity.Download.URL(childComplexity), true

	case "Endpoint.alias":
		if e.complexity.Endpoint.Alias == nil {
			break
		}

		return e.complexity.Endpoint.Alias(childComplexity), true
	case "Endpoint.curl":
		if e.complexity.Endpoint.Curl == nil {
			break
		}

		args, err := ec.field_Endpoint_curl_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Endpoint.Curl(childComplexity, args["variables"].(*string)), true
	case "Endpoint.description":
		if e.complexity.Endpoint.Description == nil {
			break
		}

		return e.complexity.Endpoint.Description(childComplexity), true
	case "Endpoint.httpBodyMy":
		if e.complexity.Endpoint.HTTPBodyMy == nil {
			break
		}

		return e.complexity.Endpoint.HTTPBodyMy(childComplexity), true
	case "Endpoint.httpCookiesMy":
		if e.complexity.Endpoint.HTTPCookiesMy == nil {
			break
		}

		args, err := ec.field_Endpoint_httpCookiesMy_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Endpoint.HTTPCookiesMy(childComplexity, args["sep"].(*string), args["limit"].(*int)), true
	case "Endpoint.httpHeadersMy":
		if e.complexity.Endpoint.HTTPHeadersMy == nil {
			break
		}

		args, err := ec.field_Endpoint_httpHeadersMy_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Endpoint.HTTPHeadersMy(childComplexity, args["sep"].(*string), args["limit"].(*int)), true
	case "Endpoint.httpPathMy":
		if e.complexity.Endpoint.HTTPPathMy == nil {
			break
		}

		args, err := ec.field_Endpoint_httpPathMy_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Endpoint.HTTPPathMy(childComplexity, args["sep"].(*string)), true
	case "Endpoint.httpQueriesMy":
		if e.complexity.Endpoint.HTTPQueriesMy == nil {
			break
		}

		args, err := ec.field_Endpoint_httpQueriesMy_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Endpoint.HTTPQueriesMy(childComplexity, args["sep"].(*string), args["limit"].(*int)), true
	case "Endpoint.httpBody":
		if e.complexity.Endpoint.HttpBody == nil {
			break
		}

		return e.complexity.Endpoint.HttpBody(childComplexity), true
	case "Endpoint.httpCookies":
		if e.complexity.Endpoint.HttpCookies == nil {
			break
		}

		return e.complexity.Endpoint.HttpCookies(childComplexity), true
	case "Endpoint.httpDomain":
		if e.complexity.Endpoint.HttpDomain == nil {
			break
		}

		return e.complexity.Endpoint.HttpDomain(childComplexity), true
	case "Endpoint.httpFollowRedirects":
		if e.complexity.Endpoint.HttpFollowRedirects == nil {
			break
		}

		return e.complexity.Endpoint.HttpFollowRedirects(childComplexity), true
	case "Endpoint.httpHeaders":
		if e.complexity.Endpoint.HttpHeaders == nil {
			break
		}

		return e.complexity.Endpoint.HttpHeaders(childComplexity), true
	case "Endpoint.httpMethod":
		if e.complexity.Endpoint.HttpMethod == nil {
			break
		}

		return e.complexity.Endpoint.HttpMethod(childComplexity), true
	case "Endpoint.httpPath":
		if e.complexity.Endpoint.HttpPath == nil {
			break
		}

		return e.complexity.Endpoint.HttpPath(childComplexity), true
	case "Endpoint.httpPort":
		if e.complexity.Endpoint.HttpPort == nil {
			break
		}

		return e.complexity.Endpoint.HttpPort(childComplexity), true
	case "Endpoint.httpQueries":
		if e.complexity.Endpoint.HttpQueries == nil {
			break
		}

		return e.complexity.Endpoint.HttpQueries(childComplexity), true
	case "Endpoint.httpSchema":
		if e.complexity.Endpoint.HttpSchema == nil {
			break
		}

		return e.complexity.Endpoint.HttpSchema(childComplexity), true
	case "Endpoint.httpTimeout":
		if e.complexity.Endpoint.HttpTimeout == nil {
			break
		}

		return e.complexity.Endpoint.HttpTimeout(childComplexity), true
	case "Endpoint.id":
		if e.complexity.Endpoint.Id == nil {
			break
		}

		return e.complexity.Endpoint.Id(childComplexity), true
	case "Endpoint.match":
		if e.complexity.Endpoint.Match == nil {
			break
		}

		args, err := ec.field_Endpoint_match_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Endpoint.Match(childComplexity, args["regex"].(string)), true
	case "Endpoint.name":
		if e.complexity.Endpoint.Name == nil {
			break
		}

		return e.complexity.Endpoint.Name(childComplexity), true
	case "Endpoint.notes":
		if e.complexity.Endpoint.Notes == nil {
			break
		}

		return e.complexity.Endpoint.Notes(childComplexity), true
	case "Endpoint.program":
		if e.complexity.Endpoint.Program == nil {
			break
		}

		return e.complexity.Endpoint.Program(childComplexity), true
	case "Endpoint.programId":
		if e.complexity.Endpoint.ProgramId == nil {
			break
		}

		return e.complexity.Endpoint.ProgramId(childComplexity), true
	case "Endpoint.rid":
		if e.complexity.Endpoint.Rid == nil {
			break
		}

		return e.complexity.Endpoint.Rid(childComplexity), true

	case "MemorySheet.alias":
		if e.complexity.MemorySheet.Alias == nil {
			break
		}

		return e.complexity.MemorySheet.Alias(childComplexity), true
	case "MemorySheet.createDate":
		if e.complexity.MemorySheet.CreateDate == nil {
			break
		}

		return e.complexity.MemorySheet.CreateDate(childComplexity), true
	case "MemorySheet.currentDate":
		if e.complexity.MemorySheet.CurrentDate == nil {
			break
		}

		return e.complexity.MemorySheet.CurrentDate(childComplexity), true
	case "MemorySheet.id":
		if e.complexity.MemorySheet.Id == nil {
			break
		}

		return e.complexity.MemorySheet.Id(childComplexity), true
	case "MemorySheet.nextDate":
		if e.complexity.MemorySheet.NextDate == nil {
			break
		}

		return e.complexity.MemorySheet.NextDate(childComplexity), true
	case "MemorySheet.notes":
		if e.complexity.MemorySheet.Notes == nil {
			break
		}

		return e.complexity.MemorySheet.Notes(childComplexity), true
	case "MemorySheet.value":
		if e.complexity.MemorySheet.Value == nil {
			break
		}

		return e.complexity.MemorySheet.Value(childComplexity), true

	case "Mutation.createMemorySheet":
		if e.complexity.Mutation.CreateMemorySheet == nil {
			break
		}

		args, err := ec.field_Mutation_createMemorySheet_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateMemorySheet(childComplexity, args["input"].(models.NewMemorySheet)), true
	case "Mutation.createTag":
		if e.complexity.Mutation.CreateTag == nil {
			break
		}

		args, err := ec.field_Mutation_createTag_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTag(childComplexity, args["input"].(models.NewTag)), true
	case "Mutation.createWord":
		if e.complexity.Mutation.CreateWord == nil {
			break
		}

		args, err := ec.field_Mutation_createWord_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateWord(childComplexity, args["input"].(models.NewWord)), true
	case "Mutation.createWordList":
		if e.complexity.Mutation.CreateWordList == nil {
			break
		}

		args, err := ec.field_Mutation_createWordList_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateWordList(childComplexity, args["input"].(models.NewWordList)), true
	case "Mutation.delNote":
		if e.complexity.Mutation.DelNote == nil {
			break
		}

		args, err := ec.field_Mutation_delNote_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DelNote(childComplexity, args["id"].(int)), true
	case "Mutation.deleteEndpoint":
		if e.complexity.Mutation.DeleteEndpoint == nil {
			break
		}

		args, err := ec.field_Mutation_deleteEndpoint_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEndpoint(childComplexity, args["id"].(*int), args["alias"].(*string)), true
	case "Mutation.deleteMemorySheet":
		if e.complexity.Mutation.DeleteMemorySheet == nil {
			break
		}

		args, err := ec.field_Mutation_deleteMemorySheet_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMemorySheet(childComplexity, args["id"].(*int), args["alias"].(*string)), true
	case "Mutation.deleteProgram":
		if e.complexity.Mutation.DeleteProgram == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProgram_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProgram(childComplexity, args["id"].(*int), args["alias"].(*string)), true
	case "Mutation.deleteTag":
		if e.complexity.Mutation.DeleteTag == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTag_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTag(childComplexity, args["id"].(*int), args["alias"].(*string)), true
	case "Mutation.deleteWord":
		if e.complexity.Mutation.DeleteWord == nil {
			break
		}

		args, err := ec.field_Mutation_deleteWord_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteWord(childComplexity, args["id"].(*int), args["alias"].(*string)), true
	case "Mutation.deleteWordList":
		if e.complexity.Mutation.DeleteWordList == nil {
			break
		}

		args, err := ec.field_Mutation_deleteWordList_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteWordList(childComplexity, args["id"].(*int), args["alias"].(*string)), true
	case "Mutation.helloworld":
		if e.complexity.Mutation.Helloworld == nil {
			break
		}

		return e.complexity.Mutation.Helloworld(childComplexity), true
	case "Mutation.importCurl":
		if e.complexity.Mutation.ImportCurl == nil {
			break
		}

		args, err := ec.field_Mutation_importCurl_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ImportCurl(childComplexity, args["curl"].(string)), true
	case "Mutation.newEndpoint":
		if e.complexity.Mutation.NewEndpoint == nil {
			break
		}

		args, err := ec.field_Mutation_newEndpoint_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NewEndpoint(childComplexity, args["input"].(models.NewEndpoint)), true
	case "Mutation.newNote":
		if e.complexity.Mutation.NewNote == nil {
			break
		}

		args, err := ec.field_Mutation_newNote_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NewNote(childComplexity, args["input"].(*models.NewNote)), true
	case "Mutation.newProgram":
		if e.complexity.Mutation.NewProgram == nil {
			break
		}

		args, err := ec.field_Mutation_newProgram_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NewProgram(childComplexity, args["input"].(*models.NewProgram)), true
	case "Mutation.patchEndpoint":
		if e.complexity.Mutation.PatchEndpoint == nil {
			break
		}

		args, err := ec.field_Mutation_patchEndpoint_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PatchEndpoint(childComplexity, args["id"].(*int), args["alias"].(*string), args["input"].(models.PatchEndpoint)), true
	case "Mutation.patchMemorySheet":
		if e.complexity.Mutation.PatchMemorySheet == nil {
			break
		}

		args, err := ec.field_Mutation_patchMemorySheet_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PatchMemorySheet(childComplexity, args["id"].(*int), args["alias"].(*string), args["input"].(models.PatchMemorySheet)), true
	case "Mutation.patchProgram":
		if e.complexity.Mutation.PatchProgram == nil {
			break
		}

		args, err := ec.field_Mutation_patchProgram_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PatchProgram(childComplexity, args["id"].(*int), args["alias"].(*string), args["input"].(models.PatchProgram)), true
	case "Mutation.patchTag":
		if e.complexity.Mutation.PatchTag == nil {
			break
		}

		args, err := ec.field_Mutation_patchTag_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PatchTag(childComplexity, args["id"].(*int), args["alias"].(*string), args["input"].(models.PatchTag)), true
	case "Mutation.patchWord":
		if e.complexity.Mutation.PatchWord == nil {
			break
		}

		args, err := ec.field_Mutation_patchWord_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PatchWord(childComplexity, args["id"].(*int), args["alias"].(*string), args["input"].(models.PatchWord)), true
	case "Mutation.patchWordList":
		if e.complexity.Mutation.PatchWordList == nil {
			break
		}

		args, err := ec.field_Mutation_patchWordList_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PatchWordList(childComplexity, args["id"].(*int), args["alias"].(*string), args["input"].(models.PatchWordList)), true
	case "Mutation.raw":
		if e.complexity.Mutation.Raw == nil {
			break
		}

		args, err := ec.field_Mutation_raw_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Raw(childComplexity, args["sql"].(string)), true
	case "Mutation.runCurl":
		if e.complexity.Mutation.RunCurl == nil {
			break
		}

		args, err := ec.field_Mutation_runCurl_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RunCurl(childComplexity, args["endpointAlias"].(string), args["variables"].(string)), true
	case "Mutation.updateEndpoint":
		if e.complexity.Mutation.UpdateEndpoint == nil {
			break
		}

		args, err := ec.field_Mutation_updateEndpoint_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEndpoint(childComplexity, args["id"].(*int), args["alias"].(*string), args["input"].(models.NewEndpoint)), true
	case "Mutation.updateMemorySheet":
		if e.complexity.Mutation.UpdateMemorySheet == nil {
			break
		}

		args, err := ec.field_Mutation_updateMemorySheet_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMemorySheet(childComplexity, args["id"].(*int), args["alias"].(*string), args["input"].(models.NewMemorySheet)), true
	case "Mutation.updateProgram":
		if e.complexity.Mutation.UpdateProgram == nil {
			break
		}

		args, err := ec.field_Mutation_updateProgram_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProgram(childComplexity, args["id"].(*int), args["alias"].(*string), args["input"].(models.NewProgram)), true
	case "Mutation.updateTag":
		if e.complexity.Mutation.UpdateTag == nil {
			break
		}

		args, err := ec.field_Mutation_updateTag_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTag(childComplexity, args["id"].(*int), args["alias"].(*string), args["input"].(models.NewTag)), true
	case "Mutation.updateWord":
		if e.complexity.Mutation.UpdateWord == nil {
			break
		}

		args, err := ec.field_Mutation_updateWord_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateWord(childComplexity, args["id"].(*int), args["alias"].(*string), args["input"].(models.NewWord)), true
	case "Mutation.updateWordList":
		if e.complexity.Mutation.UpdateWordList == nil {
			break
		}

		args, err := ec.field_Mutation_updateWordList_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateWordList(childComplexity, args["id"].(*int), args["alias"].(*string), args["input"].(models.NewWordList)), true

	case "MyRequest.contentLength":
		if e.complexity.MyRequest.ContentLength == nil {
			break
		}

		return e.complexity.MyRequest.ContentLength(childComplexity), true
	case "MyRequest.contentType":
		if e.complexity.MyRequest.ContentType == nil {
			break
		}

		return e.complexity.MyRequest.ContentType(childComplexity), true
	case "MyRequest.curlCommand":
		if e.complexity.MyRequest.CurlCommand == nil {
			break
		}

		return e.complexity.MyRequest.CurlCommand(childComplexity), true
	case "MyRequest.endpoint":
		if e.complexity.MyRequest.Endpoint == nil {
			break
		}

		return e.complexity.MyRequest.Endpoint(childComplexity), true
	case "MyRequest.endpointId":
		if e.complexity.MyRequest.EndpointId == nil {
			break
		}

		return e.complexity.MyRequest.EndpointId(childComplexity), true
	case "MyRequest.error":
		if e.complexity.MyRequest.Error == nil {
			break
		}

		return e.complexity.MyRequest.Error(childComplexity), true
	case "MyRequest.executedAt":
		if e.complexity.MyRequest.ExecutedAt == nil {
			break
		}

		return e.complexity.MyRequest.ExecutedAt(childComplexity), true
	case "MyRequest.id":
		if e.complexity.MyRequest.Id == nil {
			break
		}

		return e.complexity.MyRequest.Id(childComplexity), true
	case "MyRequest.latency":
		if e.complexity.MyRequest.Latency == nil {
			break
		}

		return e.complexity.MyRequest.Latency(childComplexity), true
	case "MyRequest.program":
		if e.complexity.MyRequest.Program == nil {
			break
		}

		return e.complexity.MyRequest.Program(childComplexity), true
	case "MyRequest.programId":
		if e.complexity.MyRequest.ProgramId == nil {
			break
		}

		return e.complexity.MyRequest.ProgramId(childComplexity), true
	case "MyRequest.requestBody":
		if e.complexity.MyRequest.RequestBody == nil {
			break
		}

		return e.complexity.MyRequest.RequestBody(childComplexity), true
	case "MyRequest.requestHeaders":
		if e.complexity.MyRequest.RequestHeaders == nil {
			break
		}

		return e.complexity.MyRequest.RequestHeaders(childComplexity), true
	case "MyRequest.requestMethod":
		if e.complexity.MyRequest.RequestMethod == nil {
			break
		}

		return e.complexity.MyRequest.RequestMethod(childComplexity), true
	case "MyRequest.requestUrl":
		if e.complexity.MyRequest.RequestUrl == nil {
			break
		}

		return e.complexity.MyRequest.RequestUrl(childComplexity), true
	case "MyRequest.responseBody":
		if e.complexity.MyRequest.ResponseBody == nil {
			break
		}

		return e.complexity.MyRequest.ResponseBody(childComplexity), true
	case "MyRequest.responseHeaders":
		if e.complexity.MyRequest.ResponseHeaders == nil {
			break
		}

		return e.complexity.MyRequest.ResponseHeaders(childComplexity), true
	case "MyRequest.responseStatus":
		if e.complexity.MyRequest.ResponseStatus == nil {
			break
		}

		return e.complexity.MyRequest.ResponseStatus(childComplexity), true
	case "MyRequest.size":
		if e.complexity.MyRequest.Size == nil {
			break
		}

		return e.complexity.MyRequest.Size(childComplexity), true
	case "MyRequest.success":
		if e.complexity.MyRequest.Success == nil {
			break
		}

		return e.complexity.MyRequest.Success(childComplexity), true
	case "MyRequest.variables":
		if e.complexity.MyRequest.Variables == nil {
			break
		}

		return e.complexity.MyRequest.Variables(childComplexity), true

	case "Note.id":
		if e.complexity.Note.Id == nil {
			break
		}

		return e.complexity.Note.Id(childComplexity), true
	case "Note.match":
		if e.complexity.Note.Match == nil {
			break
		}

		args, err := ec.field_Note_match_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Note.Match(childComplexity, args["regex"].(string)), true
	case "Note.noteDate":
		if e.complexity.Note.NoteDate == nil {
			break
		}

		return e.complexity.Note.NoteDate(childComplexity), true
	case "Note.value":
		if e.complexity.Note.Value == nil {
			break
		}

		return e.complexity.Note.Value(childComplexity), true

	case "Program.alias":
		if e.complexity.Program.Alias == nil {
			break
		}

		return e.complexity.Program.Alias(childComplexity), true
	case "Program.description":
		if e.complexity.Program.Description == nil {
			break
		}

		return e.complexity.Program.Description(childComplexity), true
	case "Program.domain":
		if e.complexity.Program.Domain == nil {
			break
		}

		return e.complexity.Program.Domain(childComplexity), true
	case "Program.id":
		if e.complexity.Program.Id == nil {
			break
		}

		return e.complexity.Program.Id(childComplexity), true
	case "Program.match":
		if e.complexity.Program.Match == nil {
			break
		}

		args, err := ec.field_Program_match_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Program.Match(childComplexity, args["regex"].(string)), true
	case "Program.name":
		if e.complexity.Program.Name == nil {
			break
		}

		return e.complexity.Program.Name(childComplexity), true
	case "Program.notes":
		if e.complexity.Program.Notes == nil {
			break
		}

		return e.complexity.Program.Notes(childComplexity), true
	case "Program.rid":
		if e.complexity.Program.Rid == nil {
			break
		}

		return e.complexity.Program.Rid(childComplexity), true
	case "Program.url":
		if e.complexity.Program.Url == nil {
			break
		}

		return e.complexity.Program.Url(childComplexity), true

	case "Query.endpoint":
		if e.complexity.Query.Endpoint == nil {
			break
		}

		args, err := ec.field_Query_endpoint_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Endpoint(childComplexity, args["id"].(*int), args["alias"].(*string)), true
	case "Query.endpoints":
		if e.complexity.Query.Endpoints == nil {
			break
		}

		args, err := ec.field_Query_endpoints_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Endpoints(childComplexity, args["filter"].(*models.EndpointFilter)), true
	case "Query.getWordList":
		if e.complexity.Query.GetWordList == nil {
			break
		}

		args, err := ec.field_Query_getWordList_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetWordList(childComplexity, args["id"].(*int), args["alias"].(*string)), true
	case "Query.helloworld":
		if e.complexity.Query.Helloworld == nil {
			break
		}

		return e.complexity.Query.Helloworld(childComplexity), true
	case "Query.listWordList":
		if e.complexity.Query.ListWordList == nil {
			break
		}

		args, err := ec.field_Query_listWordList_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListWordList(childComplexity, args["regex"].(*string)), true
	case "Query.mSheets":
		if e.complexity.Query.MSheets == nil {
			break
		}

		args, err := ec.field_Query_mSheets_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MSheets(childComplexity, args["date"].(*models.MyDate)), true
	case "Query.memorySheet":
		if e.complexity.Query.MemorySheet == nil {
			break
		}

		args, err := ec.field_Query_memorySheet_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MemorySheet(childComplexity, args["id"].(*int), args["alias"].(*string)), true
	case "Query.myRequest":
		if e.complexity.Query.MyRequest == nil {
			break
		}

		args, err := ec.field_Query_myRequest_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MyRequest(childComplexity, args["id"].(int)), true
	case "Query.myRequests":
		if e.complexity.Query.MyRequests == nil {
			break
		}

		args, err := ec.field_Query_myRequests_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MyRequests(childComplexity, args["filter"].(*models.MyRequestFilter)), true
	case "Query.notes":
		if e.complexity.Query.Notes == nil {
			break
		}

		args, err := ec.field_Query_notes_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Notes(childComplexity, args["filter"].(*models.NoteFilter)), true
	case "Query.program":
		if e.complexity.Query.Program == nil {
			break
		}

		args, err := ec.field_Query_program_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Program(childComplexity, args["id"].(*int), args["alias"].(*string)), true
	case "Query.programs":
		if e.complexity.Query.Programs == nil {
			break
		}

		args, err := ec.field_Query_programs_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Programs(childComplexity, args["search"].(*string)), true
	case "Query.raw":
		if e.complexity.Query.Raw == nil {
			break
		}

		args, err := ec.field_Query_raw_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Raw(childComplexity, args["sql"].(string)), true
	case "Query.tag":
		if e.complexity.Query.Tag == nil {
			break
		}

		args, err := ec.field_Query_tag_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Tag(childComplexity, args["id"].(*int), args["alias"].(*string)), true
	case "Query.tags":
		if e.complexity.Query.Tags == nil {
			break
		}

		args, err := ec.field_Query_tags_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Tags(childComplexity, args["search"].(*string)), true
	case "Query.word":
		if e.complexity.Query.Word == nil {
			break
		}

		args, err := ec.field_Query_word_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Word(childComplexity, args["id"].(*int), args["alias"].(*string)), true
	case "Query.words":
		if e.complexity.Query.Words == nil {
			break
		}

		args, err := ec.field_Query_words_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Words(childComplexity, args["search"].(*string)), true

	case "QueryResult.count":
		if e.complexity.QueryResult.Count == nil {
			break
		}

		return e.complexity.QueryResult.Count(childComplexity), true
	case "QueryResult.results":
		if e.complexity.QueryResult.Results == nil {
			break
		}

		args, err := ec.field_QueryResult_results_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.QueryResult.Results(childComplexity, args["sep"].(*string), args["limit"].(*int)), true

	case "SQL.count":
		if e.complexity.SQL.Count == nil {
			break
		}

		args, err := ec.field_SQL_count_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SQL.Count(childComplexity, args["table"].(string), args["where"].(string)), true
	case "SQL.del":
		if e.complexity.SQL.Del == nil {
			break
		}

		args, err := ec.field_SQL_del_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SQL.Del(childComplexity, args["table"].(string), args["where"].(string)), true
	case "SQL.delId":
		if e.complexity.SQL.DelID == nil {
			break
		}

		args, err := ec.field_SQL_delId_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SQL.DelID(childComplexity, args["table"].(string), args["id"].(int)), true
	case "SQL.delRid":
		if e.complexity.SQL.DelRid == nil {
			break
		}

		args, err := ec.field_SQL_delRid_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SQL.DelRid(childComplexity, args["rId"].(int)), true

	case "SQLResult.count":
		if e.complexity.SQLResult.Count == nil {
			break
		}

		return e.complexity.SQLResult.Count(childComplexity), true
	case "SQLResult.success":
		if e.complexity.SQLResult.Success == nil {
			break
		}

		return e.complexity.SQLResult.Success(childComplexity), true

	case "SearchResult.count":
		if e.complexity.SearchResult.Count == nil {
			break
		}

		return e.complexity.SearchResult.Count(childComplexity), true
	case "SearchResult.results":
		if e.complexity.SearchResult.Results == nil {
			break
		}

		return e.complexity.SearchResult.Results(childComplexity), true

	case "Tag.alias":
		if e.complexity.Tag.Alias == nil {
			break
		}

		return e.complexity.Tag.Alias(childComplexity), true
	case "Tag.description":
		if e.complexity.Tag.Description == nil {
			break
		}

		return e.complexity.Tag.Description(childComplexity), true
	case "Tag.id":
		if e.complexity.Tag.Id == nil {
			break
		}

		return e.complexity.Tag.Id(childComplexity), true
	case "Tag.match":
		if e.complexity.Tag.Match == nil {
			break
		}

		args, err := ec.field_Tag_match_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Tag.Match(childComplexity, args["regex"].(string)), true
	case "Tag.name":
		if e.complexity.Tag.Name == nil {
			break
		}

		return e.complexity.Tag.Name(childComplexity), true

	case "TodayMemorySheet.nextDay":
		if e.complexity.TodayMemorySheet.NextDay == nil {
			break
		}

		return e.complexity.TodayMemorySheet.NextDay(childComplexity), true
	case "TodayMemorySheet.nextMonth":
		if e.complexity.TodayMemorySheet.NextMonth == nil {
			break
		}

		return e.complexity.TodayMemorySheet.NextMonth(childComplexity), true
	case "TodayMemorySheet.sheets":
		if e.complexity.TodayMemorySheet.Sheets == nil {
			break
		}

		return e.complexity.TodayMemorySheet.Sheets(childComplexity), true
	case "TodayMemorySheet.thisMonth":
		if e.complexity.TodayMemorySheet.ThisMonth == nil {
			break
		}

		return e.complexity.TodayMemorySheet.ThisMonth(childComplexity), true
	case "TodayMemorySheet.thisWeek":
		if e.complexity.TodayMemorySheet.ThisWeek == nil {
			break
		}

		return e.complexity.TodayMemorySheet.ThisWeek(childComplexity), true
	case "TodayMemorySheet.today":
		if e.complexity.TodayMemorySheet.Today == nil {
			break
		}

		return e.complexity.TodayMemorySheet.Today(childComplexity), true

	case "Word.alias":
		if e.complexity.Word.Alias == nil {
			break
		}

		return e.complexity.Word.Alias(childComplexity), true
	case "Word.description":
		if e.complexity.Word.Description == nil {
			break
		}

		return e.complexity.Word.Description(childComplexity), true
	case "Word.id":
		if e.complexity.Word.Id == nil {
			break
		}

		return e.complexity.Word.Id(childComplexity), true
	case "Word.word":
		if e.complexity.Word.Word == nil {
			break
		}

		return e.complexity.Word.Word(childComplexity), true
	case "Word.wordType":
		if e.complexity.Word.WordType == nil {
			break
		}

		return e.complexity.Word.WordType(childComplexity), true

	case "WordList.alias":
		if e.complexity.WordList.Alias == nil {
			break
		}

		return e.complexity.WordList.Alias(childComplexity), true
	case "WordList.description":
		if e.complexity.WordList.Description == nil {
			break
		}

		return e.complexity.WordList.Description(childComplexity), true
	case "WordList.id":
		if e.complexity.WordList.Id == nil {
			break
		}

		return e.complexity.WordList.Id(childComplexity), true
	case "WordList.importUrl":
		if e.complexity.WordList.ImportURL == nil {
			break
		}

		return e.complexity.WordList.ImportURL(childComplexity), true
	case "WordList.name":
		if e.complexity.WordList.Name == nil {
			break
		}

		return e.complexity.WordList.Name(childComplexity), true
	case "WordList.words":
		if e.complexity.WordList.Words == nil {
			break
		}

		return e.complexity.WordList.Words(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputEndpointFilter,
		ec.unmarshalInputMyRequestFilter,
		ec.unmarshalInputNewEndpoint,
		ec.unmarshalInputNewMemorySheet,
		ec.unmarshalInputNewNote,
		ec.unmarshalInputNewProgram,
		ec.unmarshalInputNewTag,
		ec.unmarshalInputNewWord,
		ec.unmarshalInputNewWordList,
		ec.unmarshalInputNoteFilter,
		ec.unmarshalInputPatchEndpoint,
		ec.unmarshalInputPatchMemorySheet,
		ec.unmarshalInputPatchProgram,
		ec.unmarshalInputPatchTag,
		ec.unmarshalInputPatchWord,
		ec.unmarshalInputPatchWordList,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, opCtx.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

//go:embed "schemas/base.graphqls" "schemas/endpoint.graphqls" "schemas/memorySheet.graphqls" "schemas/myrequest.graphqls" "schemas/note.graphqls" "schemas/program.graphqls" "schemas/raw.graphqls" "schemas/root.graphqls" "schemas/sql.graphqls" "schemas/wordlist.graphqls"
var sourcesFS embed.FS

func sourceData(filename string) string {
	data, err := sourcesFS.ReadFile(filename)
	if err != nil {
		panic(fmt.Sprintf("codegen problem: %s not available", filename))
	}
	return string(data)
}

var sources = []*ast.Source{
	{Name: "schemas/base.graphqls", Input: sourceData("schemas/base.graphqls"), BuiltIn: false},
	{Name: "schemas/endpoint.graphqls", Input: sourceData("schemas/endpoint.graphqls"), BuiltIn: false},
	{Name: "schemas/memorySheet.graphqls", Input: sourceData("schemas/memorySheet.graphqls"), BuiltIn: false},
	{Name: "schemas/myrequest.graphqls", Input: sourceData("schemas/myrequest.graphqls"), BuiltIn: false},
	{Name: "schemas/note.graphqls", Input: sourceData("schemas/note.graphqls"), BuiltIn: false},
	{Name: "schemas/program.graphqls", Input: sourceData("schemas/program.graphqls"), BuiltIn: false},
	{Name: "schemas/raw.graphqls", Input: sourceData("schemas/raw.graphqls"), BuiltIn: false},
	{Name: "schemas/root.graphqls", Input: sourceData("schemas/root.graphqls"), BuiltIn: false},
	{Name: "schemas/sql.graphqls", Input: sourceData("schemas/sql.graphqls"), BuiltIn: false},
	{Name: "schemas/wordlist.graphqls", Input: sourceData("schemas/wordlist.graphqls"), BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Endpoint_curl_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "variables", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["variables"] = arg0
	return args, nil
}

func (ec *executionContext) field_Endpoint_httpCookiesMy_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "sep", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["sep"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "limit", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["limit"] = arg1
	return args, nil
}

func (ec *executionContext) field_Endpoint_httpHeadersMy_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "sep", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["sep"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "limit", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["limit"] = arg1
	return args, nil
}

func (ec *executionContext) field_Endpoint_httpPathMy_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "sep", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["sep"] = arg0
	return args, nil
}

func (ec *executionContext) field_Endpoint_httpQueriesMy_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "sep", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["sep"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "limit", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["limit"] = arg1
	return args, nil
}

func (ec *executionContext) field_Endpoint_match_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "regex", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["regex"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createMemorySheet_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNNewMemorySheet2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNewMemorySheet)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createTag_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNNewTag2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNewTag)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createWordList_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNNewWordList2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNewWordList)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createWord_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNNewWord2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNewWord)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delNote_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNInt2int)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteEndpoint_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "alias", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["alias"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteMemorySheet_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "alias", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["alias"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteProgram_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "alias", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["alias"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteTag_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "alias", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["alias"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteWordList_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "alias", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["alias"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteWord_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "alias", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["alias"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_importCurl_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "curl", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["curl"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_newEndpoint_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNNewEndpoint2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNewEndpoint)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_newNote_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalONewNote2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNewNote)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_newProgram_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalONewProgram2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNewProgram)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_patchEndpoint_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "alias", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["alias"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNPatchEndpoint2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐPatchEndpoint)
	if err != nil {
		return nil, err
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_patchMemorySheet_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "alias", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["alias"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNPatchMemorySheet2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐPatchMemorySheet)
	if err != nil {
		return nil, err
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_patchProgram_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "alias", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["alias"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNPatchProgram2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐPatchProgram)
	if err != nil {
		return nil, err
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_patchTag_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "alias", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["alias"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNPatchTag2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐPatchTag)
	if err != nil {
		return nil, err
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_patchWordList_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "alias", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["alias"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNPatchWordList2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐPatchWordList)
	if err != nil {
		return nil, err
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_patchWord_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "alias", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["alias"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNPatchWord2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐPatchWord)
	if err != nil {
		return nil, err
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_raw_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "sql", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["sql"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_runCurl_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "endpointAlias", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["endpointAlias"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "variables", ec.unmarshalNKVGroup2string)
	if err != nil {
		return nil, err
	}
	args["variables"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateEndpoint_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "alias", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["alias"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNNewEndpoint2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNewEndpoint)
	if err != nil {
		return nil, err
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateMemorySheet_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "alias", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["alias"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNNewMemorySheet2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNewMemorySheet)
	if err != nil {
		return nil, err
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProgram_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "alias", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["alias"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNNewProgram2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNewProgram)
	if err != nil {
		return nil, err
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateTag_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "alias", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["alias"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNNewTag2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNewTag)
	if err != nil {
		return nil, err
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateWordList_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "alias", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["alias"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNNewWordList2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNewWordList)
	if err != nil {
		return nil, err
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateWord_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "alias", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["alias"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNNewWord2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNewWord)
	if err != nil {
		return nil, err
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Note_match_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "regex", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["regex"] = arg0
	return args, nil
}

func (ec *executionContext) field_Program_match_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "regex", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["regex"] = arg0
	return args, nil
}

func (ec *executionContext) field_QueryResult_results_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "sep", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["sep"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "limit", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["limit"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "name", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_endpoint_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "alias", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["alias"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_endpoints_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "filter", ec.unmarshalOEndpointFilter2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐEndpointFilter)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getWordList_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "alias", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["alias"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listWordList_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "regex", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["regex"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mSheets_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "date", ec.unmarshalOMyDate2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMyDate)
	if err != nil {
		return nil, err
	}
	args["date"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_memorySheet_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "alias", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["alias"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_myRequest_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNInt2int)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_myRequests_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "filter", ec.unmarshalOMyRequestFilter2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMyRequestFilter)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_notes_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "filter", ec.unmarshalONoteFilter2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNoteFilter)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_program_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "alias", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["alias"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_programs_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "search", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["search"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_raw_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "sql", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["sql"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_tag_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "alias", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["alias"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_tags_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "search", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["search"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_word_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "alias", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["alias"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_words_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "search", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["search"] = arg0
	return args, nil
}

func (ec *executionContext) field_SQL_count_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "table", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["table"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "where", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["where"] = arg1
	return args, nil
}

func (ec *executionContext) field_SQL_delId_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "table", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["table"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNInt2int)
	if err != nil {
		return nil, err
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_SQL_delRid_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "rId", ec.unmarshalNInt2int)
	if err != nil {
		return nil, err
	}
	args["rId"] = arg0
	return args, nil
}

func (ec *executionContext) field_SQL_del_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "table", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["table"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "where", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["where"] = arg1
	return args, nil
}

func (ec *executionContext) field_Tag_match_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "regex", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["regex"] = arg0
	return args, nil
}

func (ec *executionContext) field___Directive_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2ᚖbool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Field_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2ᚖbool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2bool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2bool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AllWordList_id(ctx context.Context, field graphql.CollectedField, obj *models.AllWordList) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_AllWordList_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_AllWordList_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AllWordList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AllWordList_name(ctx context.Context, field graphql.CollectedField, obj *models.AllWordList) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_AllWordList_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_AllWordList_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AllWordList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AllWordList_description(ctx context.Context, field graphql.CollectedField, obj *models.AllWordList) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_AllWordList_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_AllWordList_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AllWordList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CurlImportResult_name(ctx context.Context, field graphql.CollectedField, obj *models.CurlImportResult) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CurlImportResult_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CurlImportResult_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CurlImportResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CurlImportResult_programAlias(ctx context.Context, field graphql.CollectedField, obj *models.CurlImportResult) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CurlImportResult_programAlias,
		func(ctx context.Context) (any, error) {
			return obj.ProgramAlias, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CurlImportResult_programAlias(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CurlImportResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CurlImportResult_description(ctx context.Context, field graphql.CollectedField, obj *models.CurlImportResult) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CurlImportResult_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalOString2string,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CurlImportResult_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CurlImportResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CurlImportResult_httpSchema(ctx context.Context, field graphql.CollectedField, obj *models.CurlImportResult) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CurlImportResult_httpSchema,
		func(ctx context.Context) (any, error) {
			return obj.HttpSchema, nil
		},
		nil,
		ec.marshalNHttpSchema2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐHttpSchema,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CurlImportResult_httpSchema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CurlImportResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HttpSchema does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CurlImportResult_httpMethod(ctx context.Context, field graphql.CollectedField, obj *models.CurlImportResult) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CurlImportResult_httpMethod,
		func(ctx context.Context) (any, error) {
			return obj.HttpMethod, nil
		},
		nil,
		ec.marshalNHttpMethod2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐHttpMethod,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CurlImportResult_httpMethod(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CurlImportResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HttpMethod does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CurlImportResult_httpDomain(ctx context.Context, field graphql.CollectedField, obj *models.CurlImportResult) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CurlImportResult_httpDomain,
		func(ctx context.Context) (any, error) {
			return obj.HttpDomain, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CurlImportResult_httpDomain(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CurlImportResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CurlImportResult_httpPort(ctx context.Context, field graphql.CollectedField, obj *models.CurlImportResult) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CurlImportResult_httpPort,
		func(ctx context.Context) (any, error) {
			return obj.HttpPort, nil
		},
		nil,
		ec.marshalOInt2int,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CurlImportResult_httpPort(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CurlImportResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CurlImportResult_httpPath(ctx context.Context, field graphql.CollectedField, obj *models.CurlImportResult) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CurlImportResult_httpPath,
		func(ctx context.Context) (any, error) {
			return obj.HttpPath, nil
		},
		nil,
		ec.marshalNVarString2githubᚗcomᚋlinn221ᚋbaneᚋmystructsᚐVarString,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CurlImportResult_httpPath(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CurlImportResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type VarString does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CurlImportResult_httpQueries(ctx context.Context, field graphql.CollectedField, obj *models.CurlImportResult) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CurlImportResult_httpQueries,
		func(ctx context.Context) (any, error) {
			return obj.HttpQueries, nil
		},
		nil,
		ec.marshalNVarKVGroup2githubᚗcomᚋlinn221ᚋbaneᚋmystructsᚐVarKVGroup,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CurlImportResult_httpQueries(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CurlImportResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type VarKVGroup does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CurlImportResult_httpHeaders(ctx context.Context, field graphql.CollectedField, obj *models.CurlImportResult) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CurlImportResult_httpHeaders,
		func(ctx context.Context) (any, error) {
			return obj.HttpHeaders, nil
		},
		nil,
		ec.marshalNVarKVGroup2githubᚗcomᚋlinn221ᚋbaneᚋmystructsᚐVarKVGroup,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CurlImportResult_httpHeaders(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CurlImportResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type VarKVGroup does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CurlImportResult_httpCookies(ctx context.Context, field graphql.CollectedField, obj *models.CurlImportResult) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CurlImportResult_httpCookies,
		func(ctx context.Context) (any, error) {
			return obj.HttpCookies, nil
		},
		nil,
		ec.marshalNVarKVGroup2githubᚗcomᚋlinn221ᚋbaneᚋmystructsᚐVarKVGroup,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CurlImportResult_httpCookies(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CurlImportResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type VarKVGroup does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CurlImportResult_httpBody(ctx context.Context, field graphql.CollectedField, obj *models.CurlImportResult) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CurlImportResult_httpBody,
		func(ctx context.Context) (any, error) {
			return obj.HttpBody, nil
		},
		nil,
		ec.marshalNVarString2githubᚗcomᚋlinn221ᚋbaneᚋmystructsᚐVarString,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CurlImportResult_httpBody(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CurlImportResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type VarString does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CurlImportResult_httpTimeout(ctx context.Context, field graphql.CollectedField, obj *models.CurlImportResult) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CurlImportResult_httpTimeout,
		func(ctx context.Context) (any, error) {
			return obj.HttpTimeout, nil
		},
		nil,
		ec.marshalOInt2int,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CurlImportResult_httpTimeout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CurlImportResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CurlImportResult_httpFollowRedirects(ctx context.Context, field graphql.CollectedField, obj *models.CurlImportResult) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CurlImportResult_httpFollowRedirects,
		func(ctx context.Context) (any, error) {
			return obj.HttpFollowRedirects, nil
		},
		nil,
		ec.marshalOBoolean2bool,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CurlImportResult_httpFollowRedirects(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CurlImportResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Download_url(ctx context.Context, field graphql.CollectedField, obj *model.Download) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Download_url,
		func(ctx context.Context) (any, error) {
			return obj.URL, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Download_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Download",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Endpoint_id(ctx context.Context, field graphql.CollectedField, obj *models.Endpoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Endpoint_id,
		func(ctx context.Context) (any, error) {
			return obj.Id, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Endpoint_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Endpoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Endpoint_programId(ctx context.Context, field graphql.CollectedField, obj *models.Endpoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Endpoint_programId,
		func(ctx context.Context) (any, error) {
			return obj.ProgramId, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Endpoint_programId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Endpoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Endpoint_program(ctx context.Context, field graphql.CollectedField, obj *models.Endpoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Endpoint_program,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Endpoint().Program(ctx, obj)
		},
		nil,
		ec.marshalNProgram2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐProgram,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Endpoint_program(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Endpoint",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Program_id(ctx, field)
			case "alias":
				return ec.fieldContext_Program_alias(ctx, field)
			case "name":
				return ec.fieldContext_Program_name(ctx, field)
			case "description":
				return ec.fieldContext_Program_description(ctx, field)
			case "domain":
				return ec.fieldContext_Program_domain(ctx, field)
			case "url":
				return ec.fieldContext_Program_url(ctx, field)
			case "match":
				return ec.fieldContext_Program_match(ctx, field)
			case "rid":
				return ec.fieldContext_Program_rid(ctx, field)
			case "notes":
				return ec.fieldContext_Program_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Program", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Endpoint_name(ctx context.Context, field graphql.CollectedField, obj *models.Endpoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Endpoint_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Endpoint_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Endpoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Endpoint_alias(ctx context.Context, field graphql.CollectedField, obj *models.Endpoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Endpoint_alias,
		func(ctx context.Context) (any, error) {
			return obj.Alias, nil
		},
		nil,
		ec.marshalOString2string,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Endpoint_alias(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Endpoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Endpoint_description(ctx context.Context, field graphql.CollectedField, obj *models.Endpoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Endpoint_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalOString2string,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Endpoint_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Endpoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Endpoint_httpSchema(ctx context.Context, field graphql.CollectedField, obj *models.Endpoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Endpoint_httpSchema,
		func(ctx context.Context) (any, error) {
			return obj.HttpSchema, nil
		},
		nil,
		ec.marshalNHttpSchema2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐHttpSchema,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Endpoint_httpSchema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Endpoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HttpSchema does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Endpoint_httpMethod(ctx context.Context, field graphql.CollectedField, obj *models.Endpoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Endpoint_httpMethod,
		func(ctx context.Context) (any, error) {
			return obj.HttpMethod, nil
		},
		nil,
		ec.marshalNHttpMethod2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐHttpMethod,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Endpoint_httpMethod(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Endpoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HttpMethod does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Endpoint_httpDomain(ctx context.Context, field graphql.CollectedField, obj *models.Endpoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Endpoint_httpDomain,
		func(ctx context.Context) (any, error) {
			return obj.HttpDomain, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Endpoint_httpDomain(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Endpoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Endpoint_httpPort(ctx context.Context, field graphql.CollectedField, obj *models.Endpoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Endpoint_httpPort,
		func(ctx context.Context) (any, error) {
			return obj.HttpPort, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Endpoint_httpPort(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Endpoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Endpoint_httpPath(ctx context.Context, field graphql.CollectedField, obj *models.Endpoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Endpoint_httpPath,
		func(ctx context.Context) (any, error) {
			return obj.HttpPath, nil
		},
		nil,
		ec.marshalNVarString2githubᚗcomᚋlinn221ᚋbaneᚋmystructsᚐVarString,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Endpoint_httpPath(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Endpoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type VarString does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Endpoint_httpQueries(ctx context.Context, field graphql.CollectedField, obj *models.Endpoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Endpoint_httpQueries,
		func(ctx context.Context) (any, error) {
			return obj.HttpQueries, nil
		},
		nil,
		ec.marshalNVarKVGroup2githubᚗcomᚋlinn221ᚋbaneᚋmystructsᚐVarKVGroup,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Endpoint_httpQueries(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Endpoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type VarKVGroup does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Endpoint_httpHeaders(ctx context.Context, field graphql.CollectedField, obj *models.Endpoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Endpoint_httpHeaders,
		func(ctx context.Context) (any, error) {
			return obj.HttpHeaders, nil
		},
		nil,
		ec.marshalNVarKVGroup2githubᚗcomᚋlinn221ᚋbaneᚋmystructsᚐVarKVGroup,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Endpoint_httpHeaders(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Endpoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type VarKVGroup does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Endpoint_httpCookies(ctx context.Context, field graphql.CollectedField, obj *models.Endpoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Endpoint_httpCookies,
		func(ctx context.Context) (any, error) {
			return obj.HttpCookies, nil
		},
		nil,
		ec.marshalNVarKVGroup2githubᚗcomᚋlinn221ᚋbaneᚋmystructsᚐVarKVGroup,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Endpoint_httpCookies(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Endpoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type VarKVGroup does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Endpoint_httpBody(ctx context.Context, field graphql.CollectedField, obj *models.Endpoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Endpoint_httpBody,
		func(ctx context.Context) (any, error) {
			return obj.HttpBody, nil
		},
		nil,
		ec.marshalNVarString2githubᚗcomᚋlinn221ᚋbaneᚋmystructsᚐVarString,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Endpoint_httpBody(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Endpoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type VarString does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Endpoint_httpTimeout(ctx context.Context, field graphql.CollectedField, obj *models.Endpoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Endpoint_httpTimeout,
		func(ctx context.Context) (any, error) {
			return obj.HttpTimeout, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Endpoint_httpTimeout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Endpoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Endpoint_httpFollowRedirects(ctx context.Context, field graphql.CollectedField, obj *models.Endpoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Endpoint_httpFollowRedirects,
		func(ctx context.Context) (any, error) {
			return obj.HttpFollowRedirects, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Endpoint_httpFollowRedirects(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Endpoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Endpoint_httpPathMy(ctx context.Context, field graphql.CollectedField, obj *models.Endpoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Endpoint_httpPathMy,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Endpoint().HTTPPathMy(ctx, obj, fc.Args["sep"].(*string))
		},
		nil,
		ec.marshalNMyString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Endpoint_httpPathMy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Endpoint",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MyString does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Endpoint_httpPathMy_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Endpoint_httpQueriesMy(ctx context.Context, field graphql.CollectedField, obj *models.Endpoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Endpoint_httpQueriesMy,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Endpoint().HTTPQueriesMy(ctx, obj, fc.Args["sep"].(*string), fc.Args["limit"].(*int))
		},
		nil,
		ec.marshalNMyString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Endpoint_httpQueriesMy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Endpoint",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MyString does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Endpoint_httpQueriesMy_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Endpoint_httpHeadersMy(ctx context.Context, field graphql.CollectedField, obj *models.Endpoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Endpoint_httpHeadersMy,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Endpoint().HTTPHeadersMy(ctx, obj, fc.Args["sep"].(*string), fc.Args["limit"].(*int))
		},
		nil,
		ec.marshalNMyString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Endpoint_httpHeadersMy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Endpoint",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MyString does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Endpoint_httpHeadersMy_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Endpoint_httpCookiesMy(ctx context.Context, field graphql.CollectedField, obj *models.Endpoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Endpoint_httpCookiesMy,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Endpoint().HTTPCookiesMy(ctx, obj, fc.Args["sep"].(*string), fc.Args["limit"].(*int))
		},
		nil,
		ec.marshalNMyString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Endpoint_httpCookiesMy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Endpoint",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MyString does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Endpoint_httpCookiesMy_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Endpoint_httpBodyMy(ctx context.Context, field graphql.CollectedField, obj *models.Endpoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Endpoint_httpBodyMy,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Endpoint().HTTPBodyMy(ctx, obj)
		},
		nil,
		ec.marshalNMyString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Endpoint_httpBodyMy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Endpoint",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MyString does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Endpoint_match(ctx context.Context, field graphql.CollectedField, obj *models.Endpoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Endpoint_match,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Endpoint().Match(ctx, obj, fc.Args["regex"].(string))
		},
		nil,
		ec.marshalNSearchResult2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋgraphᚋmodelᚐSearchResult,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Endpoint_match(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Endpoint",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "results":
				return ec.fieldContext_SearchResult_results(ctx, field)
			case "count":
				return ec.fieldContext_SearchResult_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SearchResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Endpoint_match_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Endpoint_curl(ctx context.Context, field graphql.CollectedField, obj *models.Endpoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Endpoint_curl,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Endpoint().Curl(ctx, obj, fc.Args["variables"].(*string))
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Endpoint_curl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Endpoint",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Endpoint_curl_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Endpoint_rid(ctx context.Context, field graphql.CollectedField, obj *models.Endpoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Endpoint_rid,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Endpoint().Rid(ctx, obj)
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Endpoint_rid(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Endpoint",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Endpoint_notes(ctx context.Context, field graphql.CollectedField, obj *models.Endpoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Endpoint_notes,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Endpoint().Notes(ctx, obj)
		},
		nil,
		ec.marshalONote2ᚕᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNote,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Endpoint_notes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Endpoint",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Note_id(ctx, field)
			case "value":
				return ec.fieldContext_Note_value(ctx, field)
			case "match":
				return ec.fieldContext_Note_match(ctx, field)
			case "noteDate":
				return ec.fieldContext_Note_noteDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Note", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemorySheet_id(ctx context.Context, field graphql.CollectedField, obj *models.MemorySheet) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MemorySheet_id,
		func(ctx context.Context) (any, error) {
			return obj.Id, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MemorySheet_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemorySheet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemorySheet_value(ctx context.Context, field graphql.CollectedField, obj *models.MemorySheet) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MemorySheet_value,
		func(ctx context.Context) (any, error) {
			return obj.Value, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MemorySheet_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemorySheet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemorySheet_alias(ctx context.Context, field graphql.CollectedField, obj *models.MemorySheet) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MemorySheet_alias,
		func(ctx context.Context) (any, error) {
			return obj.Alias, nil
		},
		nil,
		ec.marshalOString2string,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_MemorySheet_alias(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemorySheet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemorySheet_createDate(ctx context.Context, field graphql.CollectedField, obj *models.MemorySheet) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MemorySheet_createDate,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.MemorySheet().CreateDate(ctx, obj)
		},
		nil,
		ec.marshalNMyDate2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMyDate,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MemorySheet_createDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemorySheet",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MyDate does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemorySheet_currentDate(ctx context.Context, field graphql.CollectedField, obj *models.MemorySheet) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MemorySheet_currentDate,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.MemorySheet().CurrentDate(ctx, obj)
		},
		nil,
		ec.marshalOMyDate2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMyDate,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_MemorySheet_currentDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemorySheet",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MyDate does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemorySheet_nextDate(ctx context.Context, field graphql.CollectedField, obj *models.MemorySheet) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MemorySheet_nextDate,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.MemorySheet().NextDate(ctx, obj)
		},
		nil,
		ec.marshalOMyDate2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMyDate,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_MemorySheet_nextDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemorySheet",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MyDate does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemorySheet_notes(ctx context.Context, field graphql.CollectedField, obj *models.MemorySheet) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MemorySheet_notes,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.MemorySheet().Notes(ctx, obj)
		},
		nil,
		ec.marshalNNote2ᚕᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNoteᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MemorySheet_notes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemorySheet",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Note_id(ctx, field)
			case "value":
				return ec.fieldContext_Note_value(ctx, field)
			case "match":
				return ec.fieldContext_Note_match(ctx, field)
			case "noteDate":
				return ec.fieldContext_Note_noteDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Note", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_helloworld(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_helloworld,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Mutation().Helloworld(ctx)
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_helloworld(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createTag,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateTag(ctx, fc.Args["input"].(models.NewTag))
		},
		nil,
		ec.marshalNTag2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐTag,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tag_id(ctx, field)
			case "alias":
				return ec.fieldContext_Tag_alias(ctx, field)
			case "name":
				return ec.fieldContext_Tag_name(ctx, field)
			case "match":
				return ec.fieldContext_Tag_match(ctx, field)
			case "description":
				return ec.fieldContext_Tag_description(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tag", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateTag,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateTag(ctx, fc.Args["id"].(*int), fc.Args["alias"].(*string), fc.Args["input"].(models.NewTag))
		},
		nil,
		ec.marshalNTag2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐTag,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tag_id(ctx, field)
			case "alias":
				return ec.fieldContext_Tag_alias(ctx, field)
			case "name":
				return ec.fieldContext_Tag_name(ctx, field)
			case "match":
				return ec.fieldContext_Tag_match(ctx, field)
			case "description":
				return ec.fieldContext_Tag_description(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tag", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_patchTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_patchTag,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().PatchTag(ctx, fc.Args["id"].(*int), fc.Args["alias"].(*string), fc.Args["input"].(models.PatchTag))
		},
		nil,
		ec.marshalNTag2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐTag,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_patchTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tag_id(ctx, field)
			case "alias":
				return ec.fieldContext_Tag_alias(ctx, field)
			case "name":
				return ec.fieldContext_Tag_name(ctx, field)
			case "match":
				return ec.fieldContext_Tag_match(ctx, field)
			case "description":
				return ec.fieldContext_Tag_description(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tag", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_patchTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteTag,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteTag(ctx, fc.Args["id"].(*int), fc.Args["alias"].(*string))
		},
		nil,
		ec.marshalNTag2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐTag,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tag_id(ctx, field)
			case "alias":
				return ec.fieldContext_Tag_alias(ctx, field)
			case "name":
				return ec.fieldContext_Tag_name(ctx, field)
			case "match":
				return ec.fieldContext_Tag_match(ctx, field)
			case "description":
				return ec.fieldContext_Tag_description(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tag", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_newEndpoint(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_newEndpoint,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().NewEndpoint(ctx, fc.Args["input"].(models.NewEndpoint))
		},
		nil,
		ec.marshalNEndpoint2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐEndpoint,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_newEndpoint(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Endpoint_id(ctx, field)
			case "programId":
				return ec.fieldContext_Endpoint_programId(ctx, field)
			case "program":
				return ec.fieldContext_Endpoint_program(ctx, field)
			case "name":
				return ec.fieldContext_Endpoint_name(ctx, field)
			case "alias":
				return ec.fieldContext_Endpoint_alias(ctx, field)
			case "description":
				return ec.fieldContext_Endpoint_description(ctx, field)
			case "httpSchema":
				return ec.fieldContext_Endpoint_httpSchema(ctx, field)
			case "httpMethod":
				return ec.fieldContext_Endpoint_httpMethod(ctx, field)
			case "httpDomain":
				return ec.fieldContext_Endpoint_httpDomain(ctx, field)
			case "httpPort":
				return ec.fieldContext_Endpoint_httpPort(ctx, field)
			case "httpPath":
				return ec.fieldContext_Endpoint_httpPath(ctx, field)
			case "httpQueries":
				return ec.fieldContext_Endpoint_httpQueries(ctx, field)
			case "httpHeaders":
				return ec.fieldContext_Endpoint_httpHeaders(ctx, field)
			case "httpCookies":
				return ec.fieldContext_Endpoint_httpCookies(ctx, field)
			case "httpBody":
				return ec.fieldContext_Endpoint_httpBody(ctx, field)
			case "httpTimeout":
				return ec.fieldContext_Endpoint_httpTimeout(ctx, field)
			case "httpFollowRedirects":
				return ec.fieldContext_Endpoint_httpFollowRedirects(ctx, field)
			case "httpPathMy":
				return ec.fieldContext_Endpoint_httpPathMy(ctx, field)
			case "httpQueriesMy":
				return ec.fieldContext_Endpoint_httpQueriesMy(ctx, field)
			case "httpHeadersMy":
				return ec.fieldContext_Endpoint_httpHeadersMy(ctx, field)
			case "httpCookiesMy":
				return ec.fieldContext_Endpoint_httpCookiesMy(ctx, field)
			case "httpBodyMy":
				return ec.fieldContext_Endpoint_httpBodyMy(ctx, field)
			case "match":
				return ec.fieldContext_Endpoint_match(ctx, field)
			case "curl":
				return ec.fieldContext_Endpoint_curl(ctx, field)
			case "rid":
				return ec.fieldContext_Endpoint_rid(ctx, field)
			case "notes":
				return ec.fieldContext_Endpoint_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Endpoint", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_newEndpoint_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateEndpoint(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateEndpoint,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateEndpoint(ctx, fc.Args["id"].(*int), fc.Args["alias"].(*string), fc.Args["input"].(models.NewEndpoint))
		},
		nil,
		ec.marshalNEndpoint2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐEndpoint,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateEndpoint(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Endpoint_id(ctx, field)
			case "programId":
				return ec.fieldContext_Endpoint_programId(ctx, field)
			case "program":
				return ec.fieldContext_Endpoint_program(ctx, field)
			case "name":
				return ec.fieldContext_Endpoint_name(ctx, field)
			case "alias":
				return ec.fieldContext_Endpoint_alias(ctx, field)
			case "description":
				return ec.fieldContext_Endpoint_description(ctx, field)
			case "httpSchema":
				return ec.fieldContext_Endpoint_httpSchema(ctx, field)
			case "httpMethod":
				return ec.fieldContext_Endpoint_httpMethod(ctx, field)
			case "httpDomain":
				return ec.fieldContext_Endpoint_httpDomain(ctx, field)
			case "httpPort":
				return ec.fieldContext_Endpoint_httpPort(ctx, field)
			case "httpPath":
				return ec.fieldContext_Endpoint_httpPath(ctx, field)
			case "httpQueries":
				return ec.fieldContext_Endpoint_httpQueries(ctx, field)
			case "httpHeaders":
				return ec.fieldContext_Endpoint_httpHeaders(ctx, field)
			case "httpCookies":
				return ec.fieldContext_Endpoint_httpCookies(ctx, field)
			case "httpBody":
				return ec.fieldContext_Endpoint_httpBody(ctx, field)
			case "httpTimeout":
				return ec.fieldContext_Endpoint_httpTimeout(ctx, field)
			case "httpFollowRedirects":
				return ec.fieldContext_Endpoint_httpFollowRedirects(ctx, field)
			case "httpPathMy":
				return ec.fieldContext_Endpoint_httpPathMy(ctx, field)
			case "httpQueriesMy":
				return ec.fieldContext_Endpoint_httpQueriesMy(ctx, field)
			case "httpHeadersMy":
				return ec.fieldContext_Endpoint_httpHeadersMy(ctx, field)
			case "httpCookiesMy":
				return ec.fieldContext_Endpoint_httpCookiesMy(ctx, field)
			case "httpBodyMy":
				return ec.fieldContext_Endpoint_httpBodyMy(ctx, field)
			case "match":
				return ec.fieldContext_Endpoint_match(ctx, field)
			case "curl":
				return ec.fieldContext_Endpoint_curl(ctx, field)
			case "rid":
				return ec.fieldContext_Endpoint_rid(ctx, field)
			case "notes":
				return ec.fieldContext_Endpoint_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Endpoint", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateEndpoint_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_patchEndpoint(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_patchEndpoint,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().PatchEndpoint(ctx, fc.Args["id"].(*int), fc.Args["alias"].(*string), fc.Args["input"].(models.PatchEndpoint))
		},
		nil,
		ec.marshalNEndpoint2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐEndpoint,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_patchEndpoint(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Endpoint_id(ctx, field)
			case "programId":
				return ec.fieldContext_Endpoint_programId(ctx, field)
			case "program":
				return ec.fieldContext_Endpoint_program(ctx, field)
			case "name":
				return ec.fieldContext_Endpoint_name(ctx, field)
			case "alias":
				return ec.fieldContext_Endpoint_alias(ctx, field)
			case "description":
				return ec.fieldContext_Endpoint_description(ctx, field)
			case "httpSchema":
				return ec.fieldContext_Endpoint_httpSchema(ctx, field)
			case "httpMethod":
				return ec.fieldContext_Endpoint_httpMethod(ctx, field)
			case "httpDomain":
				return ec.fieldContext_Endpoint_httpDomain(ctx, field)
			case "httpPort":
				return ec.fieldContext_Endpoint_httpPort(ctx, field)
			case "httpPath":
				return ec.fieldContext_Endpoint_httpPath(ctx, field)
			case "httpQueries":
				return ec.fieldContext_Endpoint_httpQueries(ctx, field)
			case "httpHeaders":
				return ec.fieldContext_Endpoint_httpHeaders(ctx, field)
			case "httpCookies":
				return ec.fieldContext_Endpoint_httpCookies(ctx, field)
			case "httpBody":
				return ec.fieldContext_Endpoint_httpBody(ctx, field)
			case "httpTimeout":
				return ec.fieldContext_Endpoint_httpTimeout(ctx, field)
			case "httpFollowRedirects":
				return ec.fieldContext_Endpoint_httpFollowRedirects(ctx, field)
			case "httpPathMy":
				return ec.fieldContext_Endpoint_httpPathMy(ctx, field)
			case "httpQueriesMy":
				return ec.fieldContext_Endpoint_httpQueriesMy(ctx, field)
			case "httpHeadersMy":
				return ec.fieldContext_Endpoint_httpHeadersMy(ctx, field)
			case "httpCookiesMy":
				return ec.fieldContext_Endpoint_httpCookiesMy(ctx, field)
			case "httpBodyMy":
				return ec.fieldContext_Endpoint_httpBodyMy(ctx, field)
			case "match":
				return ec.fieldContext_Endpoint_match(ctx, field)
			case "curl":
				return ec.fieldContext_Endpoint_curl(ctx, field)
			case "rid":
				return ec.fieldContext_Endpoint_rid(ctx, field)
			case "notes":
				return ec.fieldContext_Endpoint_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Endpoint", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_patchEndpoint_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteEndpoint(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteEndpoint,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteEndpoint(ctx, fc.Args["id"].(*int), fc.Args["alias"].(*string))
		},
		nil,
		ec.marshalNEndpoint2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐEndpoint,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteEndpoint(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Endpoint_id(ctx, field)
			case "programId":
				return ec.fieldContext_Endpoint_programId(ctx, field)
			case "program":
				return ec.fieldContext_Endpoint_program(ctx, field)
			case "name":
				return ec.fieldContext_Endpoint_name(ctx, field)
			case "alias":
				return ec.fieldContext_Endpoint_alias(ctx, field)
			case "description":
				return ec.fieldContext_Endpoint_description(ctx, field)
			case "httpSchema":
				return ec.fieldContext_Endpoint_httpSchema(ctx, field)
			case "httpMethod":
				return ec.fieldContext_Endpoint_httpMethod(ctx, field)
			case "httpDomain":
				return ec.fieldContext_Endpoint_httpDomain(ctx, field)
			case "httpPort":
				return ec.fieldContext_Endpoint_httpPort(ctx, field)
			case "httpPath":
				return ec.fieldContext_Endpoint_httpPath(ctx, field)
			case "httpQueries":
				return ec.fieldContext_Endpoint_httpQueries(ctx, field)
			case "httpHeaders":
				return ec.fieldContext_Endpoint_httpHeaders(ctx, field)
			case "httpCookies":
				return ec.fieldContext_Endpoint_httpCookies(ctx, field)
			case "httpBody":
				return ec.fieldContext_Endpoint_httpBody(ctx, field)
			case "httpTimeout":
				return ec.fieldContext_Endpoint_httpTimeout(ctx, field)
			case "httpFollowRedirects":
				return ec.fieldContext_Endpoint_httpFollowRedirects(ctx, field)
			case "httpPathMy":
				return ec.fieldContext_Endpoint_httpPathMy(ctx, field)
			case "httpQueriesMy":
				return ec.fieldContext_Endpoint_httpQueriesMy(ctx, field)
			case "httpHeadersMy":
				return ec.fieldContext_Endpoint_httpHeadersMy(ctx, field)
			case "httpCookiesMy":
				return ec.fieldContext_Endpoint_httpCookiesMy(ctx, field)
			case "httpBodyMy":
				return ec.fieldContext_Endpoint_httpBodyMy(ctx, field)
			case "match":
				return ec.fieldContext_Endpoint_match(ctx, field)
			case "curl":
				return ec.fieldContext_Endpoint_curl(ctx, field)
			case "rid":
				return ec.fieldContext_Endpoint_rid(ctx, field)
			case "notes":
				return ec.fieldContext_Endpoint_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Endpoint", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteEndpoint_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_importCurl(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_importCurl,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().ImportCurl(ctx, fc.Args["curl"].(string))
		},
		nil,
		ec.marshalNCurlImportResult2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐCurlImportResult,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_importCurl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_CurlImportResult_name(ctx, field)
			case "programAlias":
				return ec.fieldContext_CurlImportResult_programAlias(ctx, field)
			case "description":
				return ec.fieldContext_CurlImportResult_description(ctx, field)
			case "httpSchema":
				return ec.fieldContext_CurlImportResult_httpSchema(ctx, field)
			case "httpMethod":
				return ec.fieldContext_CurlImportResult_httpMethod(ctx, field)
			case "httpDomain":
				return ec.fieldContext_CurlImportResult_httpDomain(ctx, field)
			case "httpPort":
				return ec.fieldContext_CurlImportResult_httpPort(ctx, field)
			case "httpPath":
				return ec.fieldContext_CurlImportResult_httpPath(ctx, field)
			case "httpQueries":
				return ec.fieldContext_CurlImportResult_httpQueries(ctx, field)
			case "httpHeaders":
				return ec.fieldContext_CurlImportResult_httpHeaders(ctx, field)
			case "httpCookies":
				return ec.fieldContext_CurlImportResult_httpCookies(ctx, field)
			case "httpBody":
				return ec.fieldContext_CurlImportResult_httpBody(ctx, field)
			case "httpTimeout":
				return ec.fieldContext_CurlImportResult_httpTimeout(ctx, field)
			case "httpFollowRedirects":
				return ec.fieldContext_CurlImportResult_httpFollowRedirects(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CurlImportResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_importCurl_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createMemorySheet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createMemorySheet,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateMemorySheet(ctx, fc.Args["input"].(models.NewMemorySheet))
		},
		nil,
		ec.marshalNMemorySheet2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMemorySheet,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createMemorySheet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MemorySheet_id(ctx, field)
			case "value":
				return ec.fieldContext_MemorySheet_value(ctx, field)
			case "alias":
				return ec.fieldContext_MemorySheet_alias(ctx, field)
			case "createDate":
				return ec.fieldContext_MemorySheet_createDate(ctx, field)
			case "currentDate":
				return ec.fieldContext_MemorySheet_currentDate(ctx, field)
			case "nextDate":
				return ec.fieldContext_MemorySheet_nextDate(ctx, field)
			case "notes":
				return ec.fieldContext_MemorySheet_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MemorySheet", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createMemorySheet_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateMemorySheet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateMemorySheet,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateMemorySheet(ctx, fc.Args["id"].(*int), fc.Args["alias"].(*string), fc.Args["input"].(models.NewMemorySheet))
		},
		nil,
		ec.marshalNMemorySheet2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMemorySheet,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateMemorySheet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MemorySheet_id(ctx, field)
			case "value":
				return ec.fieldContext_MemorySheet_value(ctx, field)
			case "alias":
				return ec.fieldContext_MemorySheet_alias(ctx, field)
			case "createDate":
				return ec.fieldContext_MemorySheet_createDate(ctx, field)
			case "currentDate":
				return ec.fieldContext_MemorySheet_currentDate(ctx, field)
			case "nextDate":
				return ec.fieldContext_MemorySheet_nextDate(ctx, field)
			case "notes":
				return ec.fieldContext_MemorySheet_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MemorySheet", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateMemorySheet_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_patchMemorySheet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_patchMemorySheet,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().PatchMemorySheet(ctx, fc.Args["id"].(*int), fc.Args["alias"].(*string), fc.Args["input"].(models.PatchMemorySheet))
		},
		nil,
		ec.marshalNMemorySheet2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMemorySheet,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_patchMemorySheet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MemorySheet_id(ctx, field)
			case "value":
				return ec.fieldContext_MemorySheet_value(ctx, field)
			case "alias":
				return ec.fieldContext_MemorySheet_alias(ctx, field)
			case "createDate":
				return ec.fieldContext_MemorySheet_createDate(ctx, field)
			case "currentDate":
				return ec.fieldContext_MemorySheet_currentDate(ctx, field)
			case "nextDate":
				return ec.fieldContext_MemorySheet_nextDate(ctx, field)
			case "notes":
				return ec.fieldContext_MemorySheet_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MemorySheet", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_patchMemorySheet_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteMemorySheet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteMemorySheet,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteMemorySheet(ctx, fc.Args["id"].(*int), fc.Args["alias"].(*string))
		},
		nil,
		ec.marshalNMemorySheet2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMemorySheet,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteMemorySheet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MemorySheet_id(ctx, field)
			case "value":
				return ec.fieldContext_MemorySheet_value(ctx, field)
			case "alias":
				return ec.fieldContext_MemorySheet_alias(ctx, field)
			case "createDate":
				return ec.fieldContext_MemorySheet_createDate(ctx, field)
			case "currentDate":
				return ec.fieldContext_MemorySheet_currentDate(ctx, field)
			case "nextDate":
				return ec.fieldContext_MemorySheet_nextDate(ctx, field)
			case "notes":
				return ec.fieldContext_MemorySheet_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MemorySheet", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteMemorySheet_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_runCurl(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_runCurl,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().RunCurl(ctx, fc.Args["endpointAlias"].(string), fc.Args["variables"].(string))
		},
		nil,
		ec.marshalNMyRequest2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMyRequest,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_runCurl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MyRequest_id(ctx, field)
			case "programId":
				return ec.fieldContext_MyRequest_programId(ctx, field)
			case "program":
				return ec.fieldContext_MyRequest_program(ctx, field)
			case "endpointId":
				return ec.fieldContext_MyRequest_endpointId(ctx, field)
			case "endpoint":
				return ec.fieldContext_MyRequest_endpoint(ctx, field)
			case "requestMethod":
				return ec.fieldContext_MyRequest_requestMethod(ctx, field)
			case "requestUrl":
				return ec.fieldContext_MyRequest_requestUrl(ctx, field)
			case "requestHeaders":
				return ec.fieldContext_MyRequest_requestHeaders(ctx, field)
			case "requestBody":
				return ec.fieldContext_MyRequest_requestBody(ctx, field)
			case "responseStatus":
				return ec.fieldContext_MyRequest_responseStatus(ctx, field)
			case "responseHeaders":
				return ec.fieldContext_MyRequest_responseHeaders(ctx, field)
			case "responseBody":
				return ec.fieldContext_MyRequest_responseBody(ctx, field)
			case "contentType":
				return ec.fieldContext_MyRequest_contentType(ctx, field)
			case "contentLength":
				return ec.fieldContext_MyRequest_contentLength(ctx, field)
			case "latency":
				return ec.fieldContext_MyRequest_latency(ctx, field)
			case "size":
				return ec.fieldContext_MyRequest_size(ctx, field)
			case "executedAt":
				return ec.fieldContext_MyRequest_executedAt(ctx, field)
			case "variables":
				return ec.fieldContext_MyRequest_variables(ctx, field)
			case "curlCommand":
				return ec.fieldContext_MyRequest_curlCommand(ctx, field)
			case "error":
				return ec.fieldContext_MyRequest_error(ctx, field)
			case "success":
				return ec.fieldContext_MyRequest_success(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MyRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_runCurl_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_newNote(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_newNote,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().NewNote(ctx, fc.Args["input"].(*models.NewNote))
		},
		nil,
		ec.marshalNNote2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNote,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_newNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Note_id(ctx, field)
			case "value":
				return ec.fieldContext_Note_value(ctx, field)
			case "match":
				return ec.fieldContext_Note_match(ctx, field)
			case "noteDate":
				return ec.fieldContext_Note_noteDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Note", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_newNote_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_delNote(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_delNote,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DelNote(ctx, fc.Args["id"].(int))
		},
		nil,
		ec.marshalNNote2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNote,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_delNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Note_id(ctx, field)
			case "value":
				return ec.fieldContext_Note_value(ctx, field)
			case "match":
				return ec.fieldContext_Note_match(ctx, field)
			case "noteDate":
				return ec.fieldContext_Note_noteDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Note", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_delNote_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_newProgram(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_newProgram,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().NewProgram(ctx, fc.Args["input"].(*models.NewProgram))
		},
		nil,
		ec.marshalNProgram2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐProgram,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_newProgram(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Program_id(ctx, field)
			case "alias":
				return ec.fieldContext_Program_alias(ctx, field)
			case "name":
				return ec.fieldContext_Program_name(ctx, field)
			case "description":
				return ec.fieldContext_Program_description(ctx, field)
			case "domain":
				return ec.fieldContext_Program_domain(ctx, field)
			case "url":
				return ec.fieldContext_Program_url(ctx, field)
			case "match":
				return ec.fieldContext_Program_match(ctx, field)
			case "rid":
				return ec.fieldContext_Program_rid(ctx, field)
			case "notes":
				return ec.fieldContext_Program_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Program", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_newProgram_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateProgram(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateProgram,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateProgram(ctx, fc.Args["id"].(*int), fc.Args["alias"].(*string), fc.Args["input"].(models.NewProgram))
		},
		nil,
		ec.marshalNProgram2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐProgram,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateProgram(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Program_id(ctx, field)
			case "alias":
				return ec.fieldContext_Program_alias(ctx, field)
			case "name":
				return ec.fieldContext_Program_name(ctx, field)
			case "description":
				return ec.fieldContext_Program_description(ctx, field)
			case "domain":
				return ec.fieldContext_Program_domain(ctx, field)
			case "url":
				return ec.fieldContext_Program_url(ctx, field)
			case "match":
				return ec.fieldContext_Program_match(ctx, field)
			case "rid":
				return ec.fieldContext_Program_rid(ctx, field)
			case "notes":
				return ec.fieldContext_Program_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Program", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateProgram_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_patchProgram(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_patchProgram,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().PatchProgram(ctx, fc.Args["id"].(*int), fc.Args["alias"].(*string), fc.Args["input"].(models.PatchProgram))
		},
		nil,
		ec.marshalNProgram2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐProgram,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_patchProgram(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Program_id(ctx, field)
			case "alias":
				return ec.fieldContext_Program_alias(ctx, field)
			case "name":
				return ec.fieldContext_Program_name(ctx, field)
			case "description":
				return ec.fieldContext_Program_description(ctx, field)
			case "domain":
				return ec.fieldContext_Program_domain(ctx, field)
			case "url":
				return ec.fieldContext_Program_url(ctx, field)
			case "match":
				return ec.fieldContext_Program_match(ctx, field)
			case "rid":
				return ec.fieldContext_Program_rid(ctx, field)
			case "notes":
				return ec.fieldContext_Program_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Program", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_patchProgram_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteProgram(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteProgram,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteProgram(ctx, fc.Args["id"].(*int), fc.Args["alias"].(*string))
		},
		nil,
		ec.marshalNProgram2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐProgram,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteProgram(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Program_id(ctx, field)
			case "alias":
				return ec.fieldContext_Program_alias(ctx, field)
			case "name":
				return ec.fieldContext_Program_name(ctx, field)
			case "description":
				return ec.fieldContext_Program_description(ctx, field)
			case "domain":
				return ec.fieldContext_Program_domain(ctx, field)
			case "url":
				return ec.fieldContext_Program_url(ctx, field)
			case "match":
				return ec.fieldContext_Program_match(ctx, field)
			case "rid":
				return ec.fieldContext_Program_rid(ctx, field)
			case "notes":
				return ec.fieldContext_Program_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Program", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteProgram_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_raw(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_raw,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().Raw(ctx, fc.Args["sql"].(string))
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_raw(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_raw_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createWord(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createWord,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateWord(ctx, fc.Args["input"].(models.NewWord))
		},
		nil,
		ec.marshalNWord2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐWord,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createWord(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Word_id(ctx, field)
			case "word":
				return ec.fieldContext_Word_word(ctx, field)
			case "alias":
				return ec.fieldContext_Word_alias(ctx, field)
			case "wordType":
				return ec.fieldContext_Word_wordType(ctx, field)
			case "description":
				return ec.fieldContext_Word_description(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Word", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createWord_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateWord(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateWord,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateWord(ctx, fc.Args["id"].(*int), fc.Args["alias"].(*string), fc.Args["input"].(models.NewWord))
		},
		nil,
		ec.marshalNWord2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐWord,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateWord(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Word_id(ctx, field)
			case "word":
				return ec.fieldContext_Word_word(ctx, field)
			case "alias":
				return ec.fieldContext_Word_alias(ctx, field)
			case "wordType":
				return ec.fieldContext_Word_wordType(ctx, field)
			case "description":
				return ec.fieldContext_Word_description(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Word", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateWord_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_patchWord(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_patchWord,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().PatchWord(ctx, fc.Args["id"].(*int), fc.Args["alias"].(*string), fc.Args["input"].(models.PatchWord))
		},
		nil,
		ec.marshalNWord2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐWord,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_patchWord(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Word_id(ctx, field)
			case "word":
				return ec.fieldContext_Word_word(ctx, field)
			case "alias":
				return ec.fieldContext_Word_alias(ctx, field)
			case "wordType":
				return ec.fieldContext_Word_wordType(ctx, field)
			case "description":
				return ec.fieldContext_Word_description(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Word", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_patchWord_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteWord(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteWord,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteWord(ctx, fc.Args["id"].(*int), fc.Args["alias"].(*string))
		},
		nil,
		ec.marshalNWord2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐWord,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteWord(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Word_id(ctx, field)
			case "word":
				return ec.fieldContext_Word_word(ctx, field)
			case "alias":
				return ec.fieldContext_Word_alias(ctx, field)
			case "wordType":
				return ec.fieldContext_Word_wordType(ctx, field)
			case "description":
				return ec.fieldContext_Word_description(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Word", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteWord_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createWordList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createWordList,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateWordList(ctx, fc.Args["input"].(models.NewWordList))
		},
		nil,
		ec.marshalNWordList2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐWordList,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createWordList(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_WordList_id(ctx, field)
			case "name":
				return ec.fieldContext_WordList_name(ctx, field)
			case "alias":
				return ec.fieldContext_WordList_alias(ctx, field)
			case "description":
				return ec.fieldContext_WordList_description(ctx, field)
			case "words":
				return ec.fieldContext_WordList_words(ctx, field)
			case "importUrl":
				return ec.fieldContext_WordList_importUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type WordList", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createWordList_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateWordList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateWordList,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateWordList(ctx, fc.Args["id"].(*int), fc.Args["alias"].(*string), fc.Args["input"].(models.NewWordList))
		},
		nil,
		ec.marshalNWordList2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐWordList,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateWordList(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_WordList_id(ctx, field)
			case "name":
				return ec.fieldContext_WordList_name(ctx, field)
			case "alias":
				return ec.fieldContext_WordList_alias(ctx, field)
			case "description":
				return ec.fieldContext_WordList_description(ctx, field)
			case "words":
				return ec.fieldContext_WordList_words(ctx, field)
			case "importUrl":
				return ec.fieldContext_WordList_importUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type WordList", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateWordList_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_patchWordList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_patchWordList,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().PatchWordList(ctx, fc.Args["id"].(*int), fc.Args["alias"].(*string), fc.Args["input"].(models.PatchWordList))
		},
		nil,
		ec.marshalNWordList2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐWordList,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_patchWordList(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_WordList_id(ctx, field)
			case "name":
				return ec.fieldContext_WordList_name(ctx, field)
			case "alias":
				return ec.fieldContext_WordList_alias(ctx, field)
			case "description":
				return ec.fieldContext_WordList_description(ctx, field)
			case "words":
				return ec.fieldContext_WordList_words(ctx, field)
			case "importUrl":
				return ec.fieldContext_WordList_importUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type WordList", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_patchWordList_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteWordList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteWordList,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteWordList(ctx, fc.Args["id"].(*int), fc.Args["alias"].(*string))
		},
		nil,
		ec.marshalNWordList2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐWordList,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteWordList(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_WordList_id(ctx, field)
			case "name":
				return ec.fieldContext_WordList_name(ctx, field)
			case "alias":
				return ec.fieldContext_WordList_alias(ctx, field)
			case "description":
				return ec.fieldContext_WordList_description(ctx, field)
			case "words":
				return ec.fieldContext_WordList_words(ctx, field)
			case "importUrl":
				return ec.fieldContext_WordList_importUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type WordList", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteWordList_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _MyRequest_id(ctx context.Context, field graphql.CollectedField, obj *models.MyRequest) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MyRequest_id,
		func(ctx context.Context) (any, error) {
			return obj.Id, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MyRequest_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MyRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MyRequest_programId(ctx context.Context, field graphql.CollectedField, obj *models.MyRequest) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MyRequest_programId,
		func(ctx context.Context) (any, error) {
			return obj.ProgramId, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MyRequest_programId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MyRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MyRequest_program(ctx context.Context, field graphql.CollectedField, obj *models.MyRequest) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MyRequest_program,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.MyRequest().Program(ctx, obj)
		},
		nil,
		ec.marshalNProgram2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐProgram,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MyRequest_program(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MyRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Program_id(ctx, field)
			case "alias":
				return ec.fieldContext_Program_alias(ctx, field)
			case "name":
				return ec.fieldContext_Program_name(ctx, field)
			case "description":
				return ec.fieldContext_Program_description(ctx, field)
			case "domain":
				return ec.fieldContext_Program_domain(ctx, field)
			case "url":
				return ec.fieldContext_Program_url(ctx, field)
			case "match":
				return ec.fieldContext_Program_match(ctx, field)
			case "rid":
				return ec.fieldContext_Program_rid(ctx, field)
			case "notes":
				return ec.fieldContext_Program_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Program", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MyRequest_endpointId(ctx context.Context, field graphql.CollectedField, obj *models.MyRequest) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MyRequest_endpointId,
		func(ctx context.Context) (any, error) {
			return obj.EndpointId, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MyRequest_endpointId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MyRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MyRequest_endpoint(ctx context.Context, field graphql.CollectedField, obj *models.MyRequest) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MyRequest_endpoint,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.MyRequest().Endpoint(ctx, obj)
		},
		nil,
		ec.marshalNEndpoint2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐEndpoint,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MyRequest_endpoint(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MyRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Endpoint_id(ctx, field)
			case "programId":
				return ec.fieldContext_Endpoint_programId(ctx, field)
			case "program":
				return ec.fieldContext_Endpoint_program(ctx, field)
			case "name":
				return ec.fieldContext_Endpoint_name(ctx, field)
			case "alias":
				return ec.fieldContext_Endpoint_alias(ctx, field)
			case "description":
				return ec.fieldContext_Endpoint_description(ctx, field)
			case "httpSchema":
				return ec.fieldContext_Endpoint_httpSchema(ctx, field)
			case "httpMethod":
				return ec.fieldContext_Endpoint_httpMethod(ctx, field)
			case "httpDomain":
				return ec.fieldContext_Endpoint_httpDomain(ctx, field)
			case "httpPort":
				return ec.fieldContext_Endpoint_httpPort(ctx, field)
			case "httpPath":
				return ec.fieldContext_Endpoint_httpPath(ctx, field)
			case "httpQueries":
				return ec.fieldContext_Endpoint_httpQueries(ctx, field)
			case "httpHeaders":
				return ec.fieldContext_Endpoint_httpHeaders(ctx, field)
			case "httpCookies":
				return ec.fieldContext_Endpoint_httpCookies(ctx, field)
			case "httpBody":
				return ec.fieldContext_Endpoint_httpBody(ctx, field)
			case "httpTimeout":
				return ec.fieldContext_Endpoint_httpTimeout(ctx, field)
			case "httpFollowRedirects":
				return ec.fieldContext_Endpoint_httpFollowRedirects(ctx, field)
			case "httpPathMy":
				return ec.fieldContext_Endpoint_httpPathMy(ctx, field)
			case "httpQueriesMy":
				return ec.fieldContext_Endpoint_httpQueriesMy(ctx, field)
			case "httpHeadersMy":
				return ec.fieldContext_Endpoint_httpHeadersMy(ctx, field)
			case "httpCookiesMy":
				return ec.fieldContext_Endpoint_httpCookiesMy(ctx, field)
			case "httpBodyMy":
				return ec.fieldContext_Endpoint_httpBodyMy(ctx, field)
			case "match":
				return ec.fieldContext_Endpoint_match(ctx, field)
			case "curl":
				return ec.fieldContext_Endpoint_curl(ctx, field)
			case "rid":
				return ec.fieldContext_Endpoint_rid(ctx, field)
			case "notes":
				return ec.fieldContext_Endpoint_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Endpoint", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MyRequest_requestMethod(ctx context.Context, field graphql.CollectedField, obj *models.MyRequest) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MyRequest_requestMethod,
		func(ctx context.Context) (any, error) {
			return obj.RequestMethod, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MyRequest_requestMethod(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MyRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MyRequest_requestUrl(ctx context.Context, field graphql.CollectedField, obj *models.MyRequest) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MyRequest_requestUrl,
		func(ctx context.Context) (any, error) {
			return obj.RequestUrl, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MyRequest_requestUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MyRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MyRequest_requestHeaders(ctx context.Context, field graphql.CollectedField, obj *models.MyRequest) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MyRequest_requestHeaders,
		func(ctx context.Context) (any, error) {
			return obj.RequestHeaders, nil
		},
		nil,
		ec.marshalOString2string,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_MyRequest_requestHeaders(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MyRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MyRequest_requestBody(ctx context.Context, field graphql.CollectedField, obj *models.MyRequest) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MyRequest_requestBody,
		func(ctx context.Context) (any, error) {
			return obj.RequestBody, nil
		},
		nil,
		ec.marshalOString2string,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_MyRequest_requestBody(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MyRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MyRequest_responseStatus(ctx context.Context, field graphql.CollectedField, obj *models.MyRequest) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MyRequest_responseStatus,
		func(ctx context.Context) (any, error) {
			return obj.ResponseStatus, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MyRequest_responseStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MyRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MyRequest_responseHeaders(ctx context.Context, field graphql.CollectedField, obj *models.MyRequest) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MyRequest_responseHeaders,
		func(ctx context.Context) (any, error) {
			return obj.ResponseHeaders, nil
		},
		nil,
		ec.marshalOString2string,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_MyRequest_responseHeaders(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MyRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MyRequest_responseBody(ctx context.Context, field graphql.CollectedField, obj *models.MyRequest) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MyRequest_responseBody,
		func(ctx context.Context) (any, error) {
			return obj.ResponseBody, nil
		},
		nil,
		ec.marshalOString2string,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_MyRequest_responseBody(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MyRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MyRequest_contentType(ctx context.Context, field graphql.CollectedField, obj *models.MyRequest) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MyRequest_contentType,
		func(ctx context.Context) (any, error) {
			return obj.ContentType, nil
		},
		nil,
		ec.marshalOString2string,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_MyRequest_contentType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MyRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MyRequest_contentLength(ctx context.Context, field graphql.CollectedField, obj *models.MyRequest) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MyRequest_contentLength,
		func(ctx context.Context) (any, error) {
			return obj.ContentLength, nil
		},
		nil,
		ec.marshalNInt2int64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MyRequest_contentLength(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MyRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MyRequest_latency(ctx context.Context, field graphql.CollectedField, obj *models.MyRequest) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MyRequest_latency,
		func(ctx context.Context) (any, error) {
			return obj.Latency, nil
		},
		nil,
		ec.marshalNInt2int64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MyRequest_latency(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MyRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MyRequest_size(ctx context.Context, field graphql.CollectedField, obj *models.MyRequest) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MyRequest_size,
		func(ctx context.Context) (any, error) {
			return obj.Size, nil
		},
		nil,
		ec.marshalNInt2int64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MyRequest_size(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MyRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MyRequest_executedAt(ctx context.Context, field graphql.CollectedField, obj *models.MyRequest) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MyRequest_executedAt,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.MyRequest().ExecutedAt(ctx, obj)
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MyRequest_executedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MyRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MyRequest_variables(ctx context.Context, field graphql.CollectedField, obj *models.MyRequest) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MyRequest_variables,
		func(ctx context.Context) (any, error) {
			return obj.Variables, nil
		},
		nil,
		ec.marshalOString2string,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_MyRequest_variables(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MyRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MyRequest_curlCommand(ctx context.Context, field graphql.CollectedField, obj *models.MyRequest) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MyRequest_curlCommand,
		func(ctx context.Context) (any, error) {
			return obj.CurlCommand, nil
		},
		nil,
		ec.marshalOString2string,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_MyRequest_curlCommand(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MyRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MyRequest_error(ctx context.Context, field graphql.CollectedField, obj *models.MyRequest) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MyRequest_error,
		func(ctx context.Context) (any, error) {
			return obj.Error, nil
		},
		nil,
		ec.marshalOString2string,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_MyRequest_error(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MyRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MyRequest_success(ctx context.Context, field graphql.CollectedField, obj *models.MyRequest) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MyRequest_success,
		func(ctx context.Context) (any, error) {
			return obj.Success, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MyRequest_success(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MyRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Note_id(ctx context.Context, field graphql.CollectedField, obj *models.Note) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Note_id,
		func(ctx context.Context) (any, error) {
			return obj.Id, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Note_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Note",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Note_value(ctx context.Context, field graphql.CollectedField, obj *models.Note) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Note_value,
		func(ctx context.Context) (any, error) {
			return obj.Value, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Note_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Note",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Note_match(ctx context.Context, field graphql.CollectedField, obj *models.Note) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Note_match,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Note().Match(ctx, obj, fc.Args["regex"].(string))
		},
		nil,
		ec.marshalNSearchResult2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋgraphᚋmodelᚐSearchResult,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Note_match(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Note",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "results":
				return ec.fieldContext_SearchResult_results(ctx, field)
			case "count":
				return ec.fieldContext_SearchResult_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SearchResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Note_match_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Note_noteDate(ctx context.Context, field graphql.CollectedField, obj *models.Note) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Note_noteDate,
		func(ctx context.Context) (any, error) {
			return obj.NoteDate, nil
		},
		nil,
		ec.marshalNMyDate2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMyDate,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Note_noteDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Note",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MyDate does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Program_id(ctx context.Context, field graphql.CollectedField, obj *models.Program) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Program_id,
		func(ctx context.Context) (any, error) {
			return obj.Id, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Program_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Program",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Program_alias(ctx context.Context, field graphql.CollectedField, obj *models.Program) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Program_alias,
		func(ctx context.Context) (any, error) {
			return obj.Alias, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Program_alias(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Program",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Program_name(ctx context.Context, field graphql.CollectedField, obj *models.Program) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Program_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Program_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Program",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Program_description(ctx context.Context, field graphql.CollectedField, obj *models.Program) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Program_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalOString2string,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Program_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Program",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Program_domain(ctx context.Context, field graphql.CollectedField, obj *models.Program) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Program_domain,
		func(ctx context.Context) (any, error) {
			return obj.Domain, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Program_domain(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Program",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Program_url(ctx context.Context, field graphql.CollectedField, obj *models.Program) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Program_url,
		func(ctx context.Context) (any, error) {
			return obj.Url, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Program_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Program",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Program_match(ctx context.Context, field graphql.CollectedField, obj *models.Program) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Program_match,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Program().Match(ctx, obj, fc.Args["regex"].(string))
		},
		nil,
		ec.marshalNSearchResult2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋgraphᚋmodelᚐSearchResult,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Program_match(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Program",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "results":
				return ec.fieldContext_SearchResult_results(ctx, field)
			case "count":
				return ec.fieldContext_SearchResult_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SearchResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Program_match_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Program_rid(ctx context.Context, field graphql.CollectedField, obj *models.Program) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Program_rid,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Program().Rid(ctx, obj)
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Program_rid(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Program",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Program_notes(ctx context.Context, field graphql.CollectedField, obj *models.Program) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Program_notes,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Program().Notes(ctx, obj)
		},
		nil,
		ec.marshalONote2ᚕᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNote,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Program_notes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Program",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Note_id(ctx, field)
			case "value":
				return ec.fieldContext_Note_value(ctx, field)
			case "match":
				return ec.fieldContext_Note_match(ctx, field)
			case "noteDate":
				return ec.fieldContext_Note_noteDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Note", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_helloworld(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_helloworld,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().Helloworld(ctx)
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_helloworld(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_tag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_tag,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Tag(ctx, fc.Args["id"].(*int), fc.Args["alias"].(*string))
		},
		nil,
		ec.marshalNTag2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐTag,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_tag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tag_id(ctx, field)
			case "alias":
				return ec.fieldContext_Tag_alias(ctx, field)
			case "name":
				return ec.fieldContext_Tag_name(ctx, field)
			case "match":
				return ec.fieldContext_Tag_match(ctx, field)
			case "description":
				return ec.fieldContext_Tag_description(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tag", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_tag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_tags(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_tags,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Tags(ctx, fc.Args["search"].(*string))
		},
		nil,
		ec.marshalOTag2ᚕᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐTag,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_tags(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tag_id(ctx, field)
			case "alias":
				return ec.fieldContext_Tag_alias(ctx, field)
			case "name":
				return ec.fieldContext_Tag_name(ctx, field)
			case "match":
				return ec.fieldContext_Tag_match(ctx, field)
			case "description":
				return ec.fieldContext_Tag_description(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tag", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_tags_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_endpoint(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_endpoint,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Endpoint(ctx, fc.Args["id"].(*int), fc.Args["alias"].(*string))
		},
		nil,
		ec.marshalNEndpoint2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐEndpoint,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_endpoint(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Endpoint_id(ctx, field)
			case "programId":
				return ec.fieldContext_Endpoint_programId(ctx, field)
			case "program":
				return ec.fieldContext_Endpoint_program(ctx, field)
			case "name":
				return ec.fieldContext_Endpoint_name(ctx, field)
			case "alias":
				return ec.fieldContext_Endpoint_alias(ctx, field)
			case "description":
				return ec.fieldContext_Endpoint_description(ctx, field)
			case "httpSchema":
				return ec.fieldContext_Endpoint_httpSchema(ctx, field)
			case "httpMethod":
				return ec.fieldContext_Endpoint_httpMethod(ctx, field)
			case "httpDomain":
				return ec.fieldContext_Endpoint_httpDomain(ctx, field)
			case "httpPort":
				return ec.fieldContext_Endpoint_httpPort(ctx, field)
			case "httpPath":
				return ec.fieldContext_Endpoint_httpPath(ctx, field)
			case "httpQueries":
				return ec.fieldContext_Endpoint_httpQueries(ctx, field)
			case "httpHeaders":
				return ec.fieldContext_Endpoint_httpHeaders(ctx, field)
			case "httpCookies":
				return ec.fieldContext_Endpoint_httpCookies(ctx, field)
			case "httpBody":
				return ec.fieldContext_Endpoint_httpBody(ctx, field)
			case "httpTimeout":
				return ec.fieldContext_Endpoint_httpTimeout(ctx, field)
			case "httpFollowRedirects":
				return ec.fieldContext_Endpoint_httpFollowRedirects(ctx, field)
			case "httpPathMy":
				return ec.fieldContext_Endpoint_httpPathMy(ctx, field)
			case "httpQueriesMy":
				return ec.fieldContext_Endpoint_httpQueriesMy(ctx, field)
			case "httpHeadersMy":
				return ec.fieldContext_Endpoint_httpHeadersMy(ctx, field)
			case "httpCookiesMy":
				return ec.fieldContext_Endpoint_httpCookiesMy(ctx, field)
			case "httpBodyMy":
				return ec.fieldContext_Endpoint_httpBodyMy(ctx, field)
			case "match":
				return ec.fieldContext_Endpoint_match(ctx, field)
			case "curl":
				return ec.fieldContext_Endpoint_curl(ctx, field)
			case "rid":
				return ec.fieldContext_Endpoint_rid(ctx, field)
			case "notes":
				return ec.fieldContext_Endpoint_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Endpoint", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_endpoint_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_endpoints(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_endpoints,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Endpoints(ctx, fc.Args["filter"].(*models.EndpointFilter))
		},
		nil,
		ec.marshalOEndpoint2ᚕᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐEndpoint,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_endpoints(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Endpoint_id(ctx, field)
			case "programId":
				return ec.fieldContext_Endpoint_programId(ctx, field)
			case "program":
				return ec.fieldContext_Endpoint_program(ctx, field)
			case "name":
				return ec.fieldContext_Endpoint_name(ctx, field)
			case "alias":
				return ec.fieldContext_Endpoint_alias(ctx, field)
			case "description":
				return ec.fieldContext_Endpoint_description(ctx, field)
			case "httpSchema":
				return ec.fieldContext_Endpoint_httpSchema(ctx, field)
			case "httpMethod":
				return ec.fieldContext_Endpoint_httpMethod(ctx, field)
			case "httpDomain":
				return ec.fieldContext_Endpoint_httpDomain(ctx, field)
			case "httpPort":
				return ec.fieldContext_Endpoint_httpPort(ctx, field)
			case "httpPath":
				return ec.fieldContext_Endpoint_httpPath(ctx, field)
			case "httpQueries":
				return ec.fieldContext_Endpoint_httpQueries(ctx, field)
			case "httpHeaders":
				return ec.fieldContext_Endpoint_httpHeaders(ctx, field)
			case "httpCookies":
				return ec.fieldContext_Endpoint_httpCookies(ctx, field)
			case "httpBody":
				return ec.fieldContext_Endpoint_httpBody(ctx, field)
			case "httpTimeout":
				return ec.fieldContext_Endpoint_httpTimeout(ctx, field)
			case "httpFollowRedirects":
				return ec.fieldContext_Endpoint_httpFollowRedirects(ctx, field)
			case "httpPathMy":
				return ec.fieldContext_Endpoint_httpPathMy(ctx, field)
			case "httpQueriesMy":
				return ec.fieldContext_Endpoint_httpQueriesMy(ctx, field)
			case "httpHeadersMy":
				return ec.fieldContext_Endpoint_httpHeadersMy(ctx, field)
			case "httpCookiesMy":
				return ec.fieldContext_Endpoint_httpCookiesMy(ctx, field)
			case "httpBodyMy":
				return ec.fieldContext_Endpoint_httpBodyMy(ctx, field)
			case "match":
				return ec.fieldContext_Endpoint_match(ctx, field)
			case "curl":
				return ec.fieldContext_Endpoint_curl(ctx, field)
			case "rid":
				return ec.fieldContext_Endpoint_rid(ctx, field)
			case "notes":
				return ec.fieldContext_Endpoint_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Endpoint", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_endpoints_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_memorySheet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_memorySheet,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().MemorySheet(ctx, fc.Args["id"].(*int), fc.Args["alias"].(*string))
		},
		nil,
		ec.marshalNMemorySheet2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMemorySheet,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_memorySheet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MemorySheet_id(ctx, field)
			case "value":
				return ec.fieldContext_MemorySheet_value(ctx, field)
			case "alias":
				return ec.fieldContext_MemorySheet_alias(ctx, field)
			case "createDate":
				return ec.fieldContext_MemorySheet_createDate(ctx, field)
			case "currentDate":
				return ec.fieldContext_MemorySheet_currentDate(ctx, field)
			case "nextDate":
				return ec.fieldContext_MemorySheet_nextDate(ctx, field)
			case "notes":
				return ec.fieldContext_MemorySheet_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MemorySheet", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_memorySheet_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mSheets(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_mSheets,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().MSheets(ctx, fc.Args["date"].(*models.MyDate))
		},
		nil,
		ec.marshalNMemorySheet2ᚕᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMemorySheetᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_mSheets(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MemorySheet_id(ctx, field)
			case "value":
				return ec.fieldContext_MemorySheet_value(ctx, field)
			case "alias":
				return ec.fieldContext_MemorySheet_alias(ctx, field)
			case "createDate":
				return ec.fieldContext_MemorySheet_createDate(ctx, field)
			case "currentDate":
				return ec.fieldContext_MemorySheet_currentDate(ctx, field)
			case "nextDate":
				return ec.fieldContext_MemorySheet_nextDate(ctx, field)
			case "notes":
				return ec.fieldContext_MemorySheet_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MemorySheet", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mSheets_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_myRequests(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_myRequests,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().MyRequests(ctx, fc.Args["filter"].(*models.MyRequestFilter))
		},
		nil,
		ec.marshalOMyRequest2ᚕᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMyRequest,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_myRequests(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MyRequest_id(ctx, field)
			case "programId":
				return ec.fieldContext_MyRequest_programId(ctx, field)
			case "program":
				return ec.fieldContext_MyRequest_program(ctx, field)
			case "endpointId":
				return ec.fieldContext_MyRequest_endpointId(ctx, field)
			case "endpoint":
				return ec.fieldContext_MyRequest_endpoint(ctx, field)
			case "requestMethod":
				return ec.fieldContext_MyRequest_requestMethod(ctx, field)
			case "requestUrl":
				return ec.fieldContext_MyRequest_requestUrl(ctx, field)
			case "requestHeaders":
				return ec.fieldContext_MyRequest_requestHeaders(ctx, field)
			case "requestBody":
				return ec.fieldContext_MyRequest_requestBody(ctx, field)
			case "responseStatus":
				return ec.fieldContext_MyRequest_responseStatus(ctx, field)
			case "responseHeaders":
				return ec.fieldContext_MyRequest_responseHeaders(ctx, field)
			case "responseBody":
				return ec.fieldContext_MyRequest_responseBody(ctx, field)
			case "contentType":
				return ec.fieldContext_MyRequest_contentType(ctx, field)
			case "contentLength":
				return ec.fieldContext_MyRequest_contentLength(ctx, field)
			case "latency":
				return ec.fieldContext_MyRequest_latency(ctx, field)
			case "size":
				return ec.fieldContext_MyRequest_size(ctx, field)
			case "executedAt":
				return ec.fieldContext_MyRequest_executedAt(ctx, field)
			case "variables":
				return ec.fieldContext_MyRequest_variables(ctx, field)
			case "curlCommand":
				return ec.fieldContext_MyRequest_curlCommand(ctx, field)
			case "error":
				return ec.fieldContext_MyRequest_error(ctx, field)
			case "success":
				return ec.fieldContext_MyRequest_success(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MyRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_myRequests_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_myRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_myRequest,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().MyRequest(ctx, fc.Args["id"].(int))
		},
		nil,
		ec.marshalNMyRequest2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMyRequest,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_myRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MyRequest_id(ctx, field)
			case "programId":
				return ec.fieldContext_MyRequest_programId(ctx, field)
			case "program":
				return ec.fieldContext_MyRequest_program(ctx, field)
			case "endpointId":
				return ec.fieldContext_MyRequest_endpointId(ctx, field)
			case "endpoint":
				return ec.fieldContext_MyRequest_endpoint(ctx, field)
			case "requestMethod":
				return ec.fieldContext_MyRequest_requestMethod(ctx, field)
			case "requestUrl":
				return ec.fieldContext_MyRequest_requestUrl(ctx, field)
			case "requestHeaders":
				return ec.fieldContext_MyRequest_requestHeaders(ctx, field)
			case "requestBody":
				return ec.fieldContext_MyRequest_requestBody(ctx, field)
			case "responseStatus":
				return ec.fieldContext_MyRequest_responseStatus(ctx, field)
			case "responseHeaders":
				return ec.fieldContext_MyRequest_responseHeaders(ctx, field)
			case "responseBody":
				return ec.fieldContext_MyRequest_responseBody(ctx, field)
			case "contentType":
				return ec.fieldContext_MyRequest_contentType(ctx, field)
			case "contentLength":
				return ec.fieldContext_MyRequest_contentLength(ctx, field)
			case "latency":
				return ec.fieldContext_MyRequest_latency(ctx, field)
			case "size":
				return ec.fieldContext_MyRequest_size(ctx, field)
			case "executedAt":
				return ec.fieldContext_MyRequest_executedAt(ctx, field)
			case "variables":
				return ec.fieldContext_MyRequest_variables(ctx, field)
			case "curlCommand":
				return ec.fieldContext_MyRequest_curlCommand(ctx, field)
			case "error":
				return ec.fieldContext_MyRequest_error(ctx, field)
			case "success":
				return ec.fieldContext_MyRequest_success(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MyRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_myRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_notes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_notes,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Notes(ctx, fc.Args["filter"].(*models.NoteFilter))
		},
		nil,
		ec.marshalONote2ᚕᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNote,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_notes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Note_id(ctx, field)
			case "value":
				return ec.fieldContext_Note_value(ctx, field)
			case "match":
				return ec.fieldContext_Note_match(ctx, field)
			case "noteDate":
				return ec.fieldContext_Note_noteDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Note", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_notes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_programs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_programs,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Programs(ctx, fc.Args["search"].(*string))
		},
		nil,
		ec.marshalOProgram2ᚕᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐProgram,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_programs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Program_id(ctx, field)
			case "alias":
				return ec.fieldContext_Program_alias(ctx, field)
			case "name":
				return ec.fieldContext_Program_name(ctx, field)
			case "description":
				return ec.fieldContext_Program_description(ctx, field)
			case "domain":
				return ec.fieldContext_Program_domain(ctx, field)
			case "url":
				return ec.fieldContext_Program_url(ctx, field)
			case "match":
				return ec.fieldContext_Program_match(ctx, field)
			case "rid":
				return ec.fieldContext_Program_rid(ctx, field)
			case "notes":
				return ec.fieldContext_Program_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Program", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_programs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_program(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_program,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Program(ctx, fc.Args["id"].(*int), fc.Args["alias"].(*string))
		},
		nil,
		ec.marshalNProgram2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐProgram,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_program(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Program_id(ctx, field)
			case "alias":
				return ec.fieldContext_Program_alias(ctx, field)
			case "name":
				return ec.fieldContext_Program_name(ctx, field)
			case "description":
				return ec.fieldContext_Program_description(ctx, field)
			case "domain":
				return ec.fieldContext_Program_domain(ctx, field)
			case "url":
				return ec.fieldContext_Program_url(ctx, field)
			case "match":
				return ec.fieldContext_Program_match(ctx, field)
			case "rid":
				return ec.fieldContext_Program_rid(ctx, field)
			case "notes":
				return ec.fieldContext_Program_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Program", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_program_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_raw(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_raw,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Raw(ctx, fc.Args["sql"].(string))
		},
		nil,
		ec.marshalNQueryResult2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐQueryResult,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_raw(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_QueryResult_count(ctx, field)
			case "results":
				return ec.fieldContext_QueryResult_results(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QueryResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_raw_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_word(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_word,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Word(ctx, fc.Args["id"].(*int), fc.Args["alias"].(*string))
		},
		nil,
		ec.marshalNWord2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐWord,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_word(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Word_id(ctx, field)
			case "word":
				return ec.fieldContext_Word_word(ctx, field)
			case "alias":
				return ec.fieldContext_Word_alias(ctx, field)
			case "wordType":
				return ec.fieldContext_Word_wordType(ctx, field)
			case "description":
				return ec.fieldContext_Word_description(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Word", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_word_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_words(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_words,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Words(ctx, fc.Args["search"].(*string))
		},
		nil,
		ec.marshalOWord2ᚕᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐWord,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_words(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Word_id(ctx, field)
			case "word":
				return ec.fieldContext_Word_word(ctx, field)
			case "alias":
				return ec.fieldContext_Word_alias(ctx, field)
			case "wordType":
				return ec.fieldContext_Word_wordType(ctx, field)
			case "description":
				return ec.fieldContext_Word_description(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Word", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_words_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getWordList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getWordList,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetWordList(ctx, fc.Args["id"].(*int), fc.Args["alias"].(*string))
		},
		nil,
		ec.marshalNWordList2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐWordList,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getWordList(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_WordList_id(ctx, field)
			case "name":
				return ec.fieldContext_WordList_name(ctx, field)
			case "alias":
				return ec.fieldContext_WordList_alias(ctx, field)
			case "description":
				return ec.fieldContext_WordList_description(ctx, field)
			case "words":
				return ec.fieldContext_WordList_words(ctx, field)
			case "importUrl":
				return ec.fieldContext_WordList_importUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type WordList", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getWordList_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listWordList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_listWordList,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().ListWordList(ctx, fc.Args["regex"].(*string))
		},
		nil,
		ec.marshalNAllWordList2ᚕᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐAllWordList,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_listWordList(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AllWordList_id(ctx, field)
			case "name":
				return ec.fieldContext_AllWordList_name(ctx, field)
			case "description":
				return ec.fieldContext_AllWordList_description(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AllWordList", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listWordList_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query___type,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.introspectType(fc.Args["name"].(string))
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query___schema,
		func(ctx context.Context) (any, error) {
			return ec.introspectSchema()
		},
		nil,
		ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QueryResult_count(ctx context.Context, field graphql.CollectedField, obj *models.QueryResult) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_QueryResult_count,
		func(ctx context.Context) (any, error) {
			return obj.Count, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_QueryResult_count(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QueryResult_results(ctx context.Context, field graphql.CollectedField, obj *models.QueryResult) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_QueryResult_results,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.QueryResult().Results(ctx, obj, fc.Args["sep"].(*string), fc.Args["limit"].(*int))
		},
		nil,
		ec.marshalNMyString2ᚕᚖstring,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_QueryResult_results(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QueryResult",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MyString does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_QueryResult_results_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SQL_delId(ctx context.Context, field graphql.CollectedField, obj *model.SQL) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SQL_delId,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.SQL().DelID(ctx, obj, fc.Args["table"].(string), fc.Args["id"].(int))
		},
		nil,
		ec.marshalOSQLResult2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋgraphᚋmodelᚐSQLResult,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SQL_delId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQL",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "success":
				return ec.fieldContext_SQLResult_success(ctx, field)
			case "count":
				return ec.fieldContext_SQLResult_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SQLResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SQL_delId_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SQL_delRid(ctx context.Context, field graphql.CollectedField, obj *model.SQL) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SQL_delRid,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.SQL().DelRid(ctx, obj, fc.Args["rId"].(int))
		},
		nil,
		ec.marshalOSQLResult2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋgraphᚋmodelᚐSQLResult,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SQL_delRid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQL",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "success":
				return ec.fieldContext_SQLResult_success(ctx, field)
			case "count":
				return ec.fieldContext_SQLResult_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SQLResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SQL_delRid_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SQL_del(ctx context.Context, field graphql.CollectedField, obj *model.SQL) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SQL_del,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.SQL().Del(ctx, obj, fc.Args["table"].(string), fc.Args["where"].(string))
		},
		nil,
		ec.marshalOSQLResult2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋgraphᚋmodelᚐSQLResult,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SQL_del(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQL",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "success":
				return ec.fieldContext_SQLResult_success(ctx, field)
			case "count":
				return ec.fieldContext_SQLResult_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SQLResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SQL_del_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SQL_count(ctx context.Context, field graphql.CollectedField, obj *model.SQL) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SQL_count,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.SQL().Count(ctx, obj, fc.Args["table"].(string), fc.Args["where"].(string))
		},
		nil,
		ec.marshalOSQLResult2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋgraphᚋmodelᚐSQLResult,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SQL_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQL",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "success":
				return ec.fieldContext_SQLResult_success(ctx, field)
			case "count":
				return ec.fieldContext_SQLResult_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SQLResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SQL_count_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SQLResult_success(ctx context.Context, field graphql.CollectedField, obj *model.SQLResult) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SQLResult_success,
		func(ctx context.Context) (any, error) {
			return obj.Success, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SQLResult_success(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLResult_count(ctx context.Context, field graphql.CollectedField, obj *model.SQLResult) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SQLResult_count,
		func(ctx context.Context) (any, error) {
			return obj.Count, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SQLResult_count(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResult_results(ctx context.Context, field graphql.CollectedField, obj *model.SearchResult) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResult_results,
		func(ctx context.Context) (any, error) {
			return obj.Results, nil
		},
		nil,
		ec.marshalOString2ᚕstringᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResult_results(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SearchResult_count(ctx context.Context, field graphql.CollectedField, obj *model.SearchResult) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SearchResult_count,
		func(ctx context.Context) (any, error) {
			return obj.Count, nil
		},
		nil,
		ec.marshalOInt2ᚖint,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SearchResult_count(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_id(ctx context.Context, field graphql.CollectedField, obj *models.Tag) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Tag_id,
		func(ctx context.Context) (any, error) {
			return obj.Id, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Tag_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_alias(ctx context.Context, field graphql.CollectedField, obj *models.Tag) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Tag_alias,
		func(ctx context.Context) (any, error) {
			return obj.Alias, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Tag_alias(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_name(ctx context.Context, field graphql.CollectedField, obj *models.Tag) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Tag_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Tag_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_match(ctx context.Context, field graphql.CollectedField, obj *models.Tag) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Tag_match,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Tag().Match(ctx, obj, fc.Args["regex"].(string))
		},
		nil,
		ec.marshalNSearchResult2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋgraphᚋmodelᚐSearchResult,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Tag_match(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "results":
				return ec.fieldContext_SearchResult_results(ctx, field)
			case "count":
				return ec.fieldContext_SearchResult_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SearchResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Tag_match_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Tag_description(ctx context.Context, field graphql.CollectedField, obj *models.Tag) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Tag_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalOString2string,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Tag_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TodayMemorySheet_today(ctx context.Context, field graphql.CollectedField, obj *model.TodayMemorySheet) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TodayMemorySheet_today,
		func(ctx context.Context) (any, error) {
			return obj.Today, nil
		},
		nil,
		ec.marshalNMyDate2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMyDate,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TodayMemorySheet_today(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TodayMemorySheet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MyDate does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TodayMemorySheet_sheets(ctx context.Context, field graphql.CollectedField, obj *model.TodayMemorySheet) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TodayMemorySheet_sheets,
		func(ctx context.Context) (any, error) {
			return obj.Sheets, nil
		},
		nil,
		ec.marshalNMemorySheet2ᚕᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMemorySheetᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TodayMemorySheet_sheets(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TodayMemorySheet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MemorySheet_id(ctx, field)
			case "value":
				return ec.fieldContext_MemorySheet_value(ctx, field)
			case "alias":
				return ec.fieldContext_MemorySheet_alias(ctx, field)
			case "createDate":
				return ec.fieldContext_MemorySheet_createDate(ctx, field)
			case "currentDate":
				return ec.fieldContext_MemorySheet_currentDate(ctx, field)
			case "nextDate":
				return ec.fieldContext_MemorySheet_nextDate(ctx, field)
			case "notes":
				return ec.fieldContext_MemorySheet_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MemorySheet", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TodayMemorySheet_nextDay(ctx context.Context, field graphql.CollectedField, obj *model.TodayMemorySheet) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TodayMemorySheet_nextDay,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.TodayMemorySheet().NextDay(ctx, obj)
		},
		nil,
		ec.marshalNMemorySheet2ᚕᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMemorySheetᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TodayMemorySheet_nextDay(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TodayMemorySheet",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MemorySheet_id(ctx, field)
			case "value":
				return ec.fieldContext_MemorySheet_value(ctx, field)
			case "alias":
				return ec.fieldContext_MemorySheet_alias(ctx, field)
			case "createDate":
				return ec.fieldContext_MemorySheet_createDate(ctx, field)
			case "currentDate":
				return ec.fieldContext_MemorySheet_currentDate(ctx, field)
			case "nextDate":
				return ec.fieldContext_MemorySheet_nextDate(ctx, field)
			case "notes":
				return ec.fieldContext_MemorySheet_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MemorySheet", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TodayMemorySheet_nextMonth(ctx context.Context, field graphql.CollectedField, obj *model.TodayMemorySheet) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TodayMemorySheet_nextMonth,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.TodayMemorySheet().NextMonth(ctx, obj)
		},
		nil,
		ec.marshalNMemorySheet2ᚕᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMemorySheetᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TodayMemorySheet_nextMonth(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TodayMemorySheet",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MemorySheet_id(ctx, field)
			case "value":
				return ec.fieldContext_MemorySheet_value(ctx, field)
			case "alias":
				return ec.fieldContext_MemorySheet_alias(ctx, field)
			case "createDate":
				return ec.fieldContext_MemorySheet_createDate(ctx, field)
			case "currentDate":
				return ec.fieldContext_MemorySheet_currentDate(ctx, field)
			case "nextDate":
				return ec.fieldContext_MemorySheet_nextDate(ctx, field)
			case "notes":
				return ec.fieldContext_MemorySheet_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MemorySheet", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TodayMemorySheet_thisWeek(ctx context.Context, field graphql.CollectedField, obj *model.TodayMemorySheet) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TodayMemorySheet_thisWeek,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.TodayMemorySheet().ThisWeek(ctx, obj)
		},
		nil,
		ec.marshalNMemorySheet2ᚕᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMemorySheetᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TodayMemorySheet_thisWeek(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TodayMemorySheet",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MemorySheet_id(ctx, field)
			case "value":
				return ec.fieldContext_MemorySheet_value(ctx, field)
			case "alias":
				return ec.fieldContext_MemorySheet_alias(ctx, field)
			case "createDate":
				return ec.fieldContext_MemorySheet_createDate(ctx, field)
			case "currentDate":
				return ec.fieldContext_MemorySheet_currentDate(ctx, field)
			case "nextDate":
				return ec.fieldContext_MemorySheet_nextDate(ctx, field)
			case "notes":
				return ec.fieldContext_MemorySheet_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MemorySheet", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TodayMemorySheet_thisMonth(ctx context.Context, field graphql.CollectedField, obj *model.TodayMemorySheet) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TodayMemorySheet_thisMonth,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.TodayMemorySheet().ThisMonth(ctx, obj)
		},
		nil,
		ec.marshalNMemorySheet2ᚕᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMemorySheetᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TodayMemorySheet_thisMonth(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TodayMemorySheet",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MemorySheet_id(ctx, field)
			case "value":
				return ec.fieldContext_MemorySheet_value(ctx, field)
			case "alias":
				return ec.fieldContext_MemorySheet_alias(ctx, field)
			case "createDate":
				return ec.fieldContext_MemorySheet_createDate(ctx, field)
			case "currentDate":
				return ec.fieldContext_MemorySheet_currentDate(ctx, field)
			case "nextDate":
				return ec.fieldContext_MemorySheet_nextDate(ctx, field)
			case "notes":
				return ec.fieldContext_MemorySheet_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MemorySheet", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Word_id(ctx context.Context, field graphql.CollectedField, obj *models.Word) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Word_id,
		func(ctx context.Context) (any, error) {
			return obj.Id, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Word_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Word",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Word_word(ctx context.Context, field graphql.CollectedField, obj *models.Word) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Word_word,
		func(ctx context.Context) (any, error) {
			return obj.Word, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Word_word(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Word",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Word_alias(ctx context.Context, field graphql.CollectedField, obj *models.Word) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Word_alias,
		func(ctx context.Context) (any, error) {
			return obj.Alias, nil
		},
		nil,
		ec.marshalOString2string,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Word_alias(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Word",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Word_wordType(ctx context.Context, field graphql.CollectedField, obj *models.Word) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Word_wordType,
		func(ctx context.Context) (any, error) {
			return obj.WordType, nil
		},
		nil,
		ec.marshalNWordType2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐWordType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Word_wordType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Word",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type WordType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Word_description(ctx context.Context, field graphql.CollectedField, obj *models.Word) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Word_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalOString2string,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Word_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Word",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WordList_id(ctx context.Context, field graphql.CollectedField, obj *models.WordList) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WordList_id,
		func(ctx context.Context) (any, error) {
			return obj.Id, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WordList_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WordList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WordList_name(ctx context.Context, field graphql.CollectedField, obj *models.WordList) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WordList_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WordList_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WordList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WordList_alias(ctx context.Context, field graphql.CollectedField, obj *models.WordList) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WordList_alias,
		func(ctx context.Context) (any, error) {
			return obj.Alias, nil
		},
		nil,
		ec.marshalOString2string,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_WordList_alias(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WordList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WordList_description(ctx context.Context, field graphql.CollectedField, obj *models.WordList) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WordList_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalOString2string,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_WordList_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WordList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WordList_words(ctx context.Context, field graphql.CollectedField, obj *models.WordList) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WordList_words,
		func(ctx context.Context) (any, error) {
			return obj.Words, nil
		},
		nil,
		ec.marshalOWord2ᚕgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐWordᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_WordList_words(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WordList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Word_id(ctx, field)
			case "word":
				return ec.fieldContext_Word_word(ctx, field)
			case "alias":
				return ec.fieldContext_Word_alias(ctx, field)
			case "wordType":
				return ec.fieldContext_Word_wordType(ctx, field)
			case "description":
				return ec.fieldContext_Word_description(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Word", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _WordList_importUrl(ctx context.Context, field graphql.CollectedField, obj *models.WordList) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WordList_importUrl,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.WordList().ImportURL(ctx, obj)
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_WordList_importUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WordList",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_isRepeatable,
		func(ctx context.Context) (any, error) {
			return obj.IsRepeatable, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_locations,
		func(ctx context.Context) (any, error) {
			return obj.Locations, nil
		},
		nil,
		ec.marshalN__DirectiveLocation2ᚕstringᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_args,
		func(ctx context.Context) (any, error) {
			return obj.Args, nil
		},
		nil,
		ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Directive_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_isDeprecated,
		func(ctx context.Context) (any, error) {
			return obj.IsDeprecated(), nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_deprecationReason,
		func(ctx context.Context) (any, error) {
			return obj.DeprecationReason(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_args,
		func(ctx context.Context) (any, error) {
			return obj.Args, nil
		},
		nil,
		ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Field_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_isDeprecated,
		func(ctx context.Context) (any, error) {
			return obj.IsDeprecated(), nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_deprecationReason,
		func(ctx context.Context) (any, error) {
			return obj.DeprecationReason(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_defaultValue,
		func(ctx context.Context) (any, error) {
			return obj.DefaultValue, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_isDeprecated,
		func(ctx context.Context) (any, error) {
			return obj.IsDeprecated(), nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___InputValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_deprecationReason,
		func(ctx context.Context) (any, error) {
			return obj.DeprecationReason(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___InputValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_types,
		func(ctx context.Context) (any, error) {
			return obj.Types(), nil
		},
		nil,
		ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_queryType,
		func(ctx context.Context) (any, error) {
			return obj.QueryType(), nil
		},
		nil,
		ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_mutationType,
		func(ctx context.Context) (any, error) {
			return obj.MutationType(), nil
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_subscriptionType,
		func(ctx context.Context) (any, error) {
			return obj.SubscriptionType(), nil
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_directives,
		func(ctx context.Context) (any, error) {
			return obj.Directives(), nil
		},
		nil,
		ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_kind,
		func(ctx context.Context) (any, error) {
			return obj.Kind(), nil
		},
		nil,
		ec.marshalN__TypeKind2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_name,
		func(ctx context.Context) (any, error) {
			return obj.Name(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_specifiedByURL,
		func(ctx context.Context) (any, error) {
			return obj.SpecifiedByURL(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_fields,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
		},
		nil,
		ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_interfaces,
		func(ctx context.Context) (any, error) {
			return obj.Interfaces(), nil
		},
		nil,
		ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_possibleTypes,
		func(ctx context.Context) (any, error) {
			return obj.PossibleTypes(), nil
		},
		nil,
		ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_enumValues,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
		},
		nil,
		ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_inputFields,
		func(ctx context.Context) (any, error) {
			return obj.InputFields(), nil
		},
		nil,
		ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_ofType,
		func(ctx context.Context) (any, error) {
			return obj.OfType(), nil
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_isOneOf(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_isOneOf,
		func(ctx context.Context) (any, error) {
			return obj.IsOneOf(), nil
		},
		nil,
		ec.marshalOBoolean2bool,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_isOneOf(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputEndpointFilter(ctx context.Context, obj any) (models.EndpointFilter, error) {
	var it models.EndpointFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"programAlias", "httpSchema", "httpMethod", "httpDomain", "search"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "programAlias":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("programAlias"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgramAlias = data
		case "httpSchema":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpSchema"))
			data, err := ec.unmarshalOHttpSchema2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐHttpSchema(ctx, v)
			if err != nil {
				return it, err
			}
			it.HttpSchema = data
		case "httpMethod":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpMethod"))
			data, err := ec.unmarshalOHttpMethod2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐHttpMethod(ctx, v)
			if err != nil {
				return it, err
			}
			it.HttpMethod = data
		case "httpDomain":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpDomain"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.HttpDomain = data
		case "search":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Search = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMyRequestFilter(ctx context.Context, obj any) (models.MyRequestFilter, error) {
	var it models.MyRequestFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"programId", "endpointId", "success", "statusMin", "statusMax", "dateFrom", "dateTo"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "programId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("programId"))
			data, err := ec.unmarshalOInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgramId = data
		case "endpointId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endpointId"))
			data, err := ec.unmarshalOInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndpointId = data
		case "success":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("success"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Success = data
		case "statusMin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusMin"))
			data, err := ec.unmarshalOInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusMin = data
		case "statusMax":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusMax"))
			data, err := ec.unmarshalOInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusMax = data
		case "dateFrom":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateFrom"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateFrom = data
		case "dateTo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateTo"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateTo = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewEndpoint(ctx context.Context, obj any) (models.NewEndpoint, error) {
	var it models.NewEndpoint
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "alias", "programAlias", "description", "httpSchema", "httpMethod", "httpDomain", "httpPort", "httpPath", "httpQueries", "httpHeaders", "httpCookies", "httpBody", "httpTimeout", "httpFollowRedirects"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "alias":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alias"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Alias = data
		case "programAlias":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("programAlias"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgramAlias = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "httpSchema":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpSchema"))
			data, err := ec.unmarshalNHttpSchema2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐHttpSchema(ctx, v)
			if err != nil {
				return it, err
			}
			it.HttpSchema = data
		case "httpMethod":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpMethod"))
			data, err := ec.unmarshalNHttpMethod2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐHttpMethod(ctx, v)
			if err != nil {
				return it, err
			}
			it.HttpMethod = data
		case "httpDomain":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpDomain"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.HttpDomain = data
		case "httpPort":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpPort"))
			data, err := ec.unmarshalOInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.HttpPort = data
		case "httpPath":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpPath"))
			data, err := ec.unmarshalNVarString2githubᚗcomᚋlinn221ᚋbaneᚋmystructsᚐVarString(ctx, v)
			if err != nil {
				return it, err
			}
			it.HttpPath = data
		case "httpQueries":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpQueries"))
			data, err := ec.unmarshalNVarKVGroup2githubᚗcomᚋlinn221ᚋbaneᚋmystructsᚐVarKVGroup(ctx, v)
			if err != nil {
				return it, err
			}
			it.HttpQueries = data
		case "httpHeaders":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpHeaders"))
			data, err := ec.unmarshalNVarKVGroup2githubᚗcomᚋlinn221ᚋbaneᚋmystructsᚐVarKVGroup(ctx, v)
			if err != nil {
				return it, err
			}
			it.HttpHeaders = data
		case "httpCookies":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpCookies"))
			data, err := ec.unmarshalNVarKVGroup2githubᚗcomᚋlinn221ᚋbaneᚋmystructsᚐVarKVGroup(ctx, v)
			if err != nil {
				return it, err
			}
			it.HttpCookies = data
		case "httpBody":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpBody"))
			data, err := ec.unmarshalNVarString2githubᚗcomᚋlinn221ᚋbaneᚋmystructsᚐVarString(ctx, v)
			if err != nil {
				return it, err
			}
			it.HttpBody = data
		case "httpTimeout":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpTimeout"))
			data, err := ec.unmarshalOInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.HttpTimeout = data
		case "httpFollowRedirects":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpFollowRedirects"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HttpFollowRedirects = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewMemorySheet(ctx context.Context, obj any) (models.NewMemorySheet, error) {
	var it models.NewMemorySheet
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"value", "alias", "date"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "value":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		case "alias":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alias"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Alias = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalOMyDate2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMyDate(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewNote(ctx context.Context, obj any) (models.NewNote, error) {
	var it models.NewNote
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"value", "rId", "referenceId", "referenceType"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "value":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		case "rId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rId"))
			data, err := ec.unmarshalOInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.RId = data
		case "referenceId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("referenceId"))
			data, err := ec.unmarshalOInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReferenceId = data
		case "referenceType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("referenceType"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReferenceType = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewProgram(ctx context.Context, obj any) (models.NewProgram, error) {
	var it models.NewProgram
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "alias", "description", "domain", "url"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "alias":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alias"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Alias = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "domain":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domain"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Domain = data
		case "url":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.URL = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewTag(ctx context.Context, obj any) (models.NewTag, error) {
	var it models.NewTag
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "alias", "description", "priority"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "alias":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alias"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Alias = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "priority":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priority"))
			data, err := ec.unmarshalOInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Priority = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewWord(ctx context.Context, obj any) (models.NewWord, error) {
	var it models.NewWord
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"word", "alias", "wordType", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "word":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("word"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Word = data
		case "alias":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alias"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Alias = data
		case "wordType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wordType"))
			data, err := ec.unmarshalNWordType2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐWordType(ctx, v)
			if err != nil {
				return it, err
			}
			it.WordType = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewWordList(ctx context.Context, obj any) (models.NewWordList, error) {
	var it models.NewWordList
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "alias", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "alias":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alias"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Alias = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNoteFilter(ctx context.Context, obj any) (models.NoteFilter, error) {
	var it models.NoteFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"rId", "referenceId", "referenceType", "noteDate", "search"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "rId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rId"))
			data, err := ec.unmarshalOInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.RID = data
		case "referenceId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("referenceId"))
			data, err := ec.unmarshalOInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReferenceID = data
		case "referenceType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("referenceType"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReferenceType = data
		case "noteDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteDate"))
			data, err := ec.unmarshalOMyDate2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMyDate(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteDate = data
		case "search":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Search = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPatchEndpoint(ctx context.Context, obj any) (models.PatchEndpoint, error) {
	var it models.PatchEndpoint
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "alias", "programAlias", "description", "httpSchema", "httpMethod", "httpDomain", "httpPort", "httpPath", "httpQueries", "httpHeaders", "httpCookies", "httpBody", "httpTimeout", "httpFollowRedirects"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "alias":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alias"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Alias = data
		case "programAlias":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("programAlias"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProgramAlias = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "httpSchema":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpSchema"))
			data, err := ec.unmarshalOHttpSchema2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐHttpSchema(ctx, v)
			if err != nil {
				return it, err
			}
			it.HttpSchema = data
		case "httpMethod":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpMethod"))
			data, err := ec.unmarshalOHttpMethod2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐHttpMethod(ctx, v)
			if err != nil {
				return it, err
			}
			it.HttpMethod = data
		case "httpDomain":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpDomain"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HttpDomain = data
		case "httpPort":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpPort"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.HttpPort = data
		case "httpPath":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpPath"))
			data, err := ec.unmarshalOVarString2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmystructsᚐVarString(ctx, v)
			if err != nil {
				return it, err
			}
			it.HttpPath = data
		case "httpQueries":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpQueries"))
			data, err := ec.unmarshalOVarKVGroup2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmystructsᚐVarKVGroup(ctx, v)
			if err != nil {
				return it, err
			}
			it.HttpQueries = data
		case "httpHeaders":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpHeaders"))
			data, err := ec.unmarshalOVarKVGroup2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmystructsᚐVarKVGroup(ctx, v)
			if err != nil {
				return it, err
			}
			it.HttpHeaders = data
		case "httpCookies":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpCookies"))
			data, err := ec.unmarshalOVarKVGroup2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmystructsᚐVarKVGroup(ctx, v)
			if err != nil {
				return it, err
			}
			it.HttpCookies = data
		case "httpBody":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpBody"))
			data, err := ec.unmarshalOVarString2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmystructsᚐVarString(ctx, v)
			if err != nil {
				return it, err
			}
			it.HttpBody = data
		case "httpTimeout":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpTimeout"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.HttpTimeout = data
		case "httpFollowRedirects":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpFollowRedirects"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HttpFollowRedirects = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPatchMemorySheet(ctx context.Context, obj any) (models.PatchMemorySheet, error) {
	var it models.PatchMemorySheet
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"value", "date"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "value":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		case "date":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			data, err := ec.unmarshalOMyDate2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMyDate(ctx, v)
			if err != nil {
				return it, err
			}
			it.Date = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPatchProgram(ctx context.Context, obj any) (models.PatchProgram, error) {
	var it models.PatchProgram
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "alias", "description", "domain", "url"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "alias":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alias"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Alias = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "domain":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domain"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Domain = data
		case "url":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.URL = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPatchTag(ctx context.Context, obj any) (models.PatchTag, error) {
	var it models.PatchTag
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "alias", "description", "priority"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "alias":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alias"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Alias = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "priority":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priority"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Priority = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPatchWord(ctx context.Context, obj any) (models.PatchWord, error) {
	var it models.PatchWord
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"word", "wordType", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "word":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("word"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Word = data
		case "wordType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wordType"))
			data, err := ec.unmarshalOWordType2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐWordType(ctx, v)
			if err != nil {
				return it, err
			}
			it.WordType = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPatchWordList(ctx context.Context, obj any) (models.PatchWordList, error) {
	var it models.PatchWordList
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var allWordListImplementors = []string{"AllWordList"}

func (ec *executionContext) _AllWordList(ctx context.Context, sel ast.SelectionSet, obj *models.AllWordList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, allWordListImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AllWordList")
		case "id":
			out.Values[i] = ec._AllWordList_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._AllWordList_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._AllWordList_description(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var curlImportResultImplementors = []string{"CurlImportResult"}

func (ec *executionContext) _CurlImportResult(ctx context.Context, sel ast.SelectionSet, obj *models.CurlImportResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, curlImportResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CurlImportResult")
		case "name":
			out.Values[i] = ec._CurlImportResult_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "programAlias":
			out.Values[i] = ec._CurlImportResult_programAlias(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._CurlImportResult_description(ctx, field, obj)
		case "httpSchema":
			out.Values[i] = ec._CurlImportResult_httpSchema(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "httpMethod":
			out.Values[i] = ec._CurlImportResult_httpMethod(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "httpDomain":
			out.Values[i] = ec._CurlImportResult_httpDomain(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "httpPort":
			out.Values[i] = ec._CurlImportResult_httpPort(ctx, field, obj)
		case "httpPath":
			out.Values[i] = ec._CurlImportResult_httpPath(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "httpQueries":
			out.Values[i] = ec._CurlImportResult_httpQueries(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "httpHeaders":
			out.Values[i] = ec._CurlImportResult_httpHeaders(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "httpCookies":
			out.Values[i] = ec._CurlImportResult_httpCookies(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "httpBody":
			out.Values[i] = ec._CurlImportResult_httpBody(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "httpTimeout":
			out.Values[i] = ec._CurlImportResult_httpTimeout(ctx, field, obj)
		case "httpFollowRedirects":
			out.Values[i] = ec._CurlImportResult_httpFollowRedirects(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var downloadImplementors = []string{"Download"}

func (ec *executionContext) _Download(ctx context.Context, sel ast.SelectionSet, obj *model.Download) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, downloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Download")
		case "url":
			out.Values[i] = ec._Download_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var endpointImplementors = []string{"Endpoint"}

func (ec *executionContext) _Endpoint(ctx context.Context, sel ast.SelectionSet, obj *models.Endpoint) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, endpointImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Endpoint")
		case "id":
			out.Values[i] = ec._Endpoint_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "programId":
			out.Values[i] = ec._Endpoint_programId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "program":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Endpoint_program(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "name":
			out.Values[i] = ec._Endpoint_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "alias":
			out.Values[i] = ec._Endpoint_alias(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Endpoint_description(ctx, field, obj)
		case "httpSchema":
			out.Values[i] = ec._Endpoint_httpSchema(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "httpMethod":
			out.Values[i] = ec._Endpoint_httpMethod(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "httpDomain":
			out.Values[i] = ec._Endpoint_httpDomain(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "httpPort":
			out.Values[i] = ec._Endpoint_httpPort(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "httpPath":
			out.Values[i] = ec._Endpoint_httpPath(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "httpQueries":
			out.Values[i] = ec._Endpoint_httpQueries(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "httpHeaders":
			out.Values[i] = ec._Endpoint_httpHeaders(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "httpCookies":
			out.Values[i] = ec._Endpoint_httpCookies(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "httpBody":
			out.Values[i] = ec._Endpoint_httpBody(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "httpTimeout":
			out.Values[i] = ec._Endpoint_httpTimeout(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "httpFollowRedirects":
			out.Values[i] = ec._Endpoint_httpFollowRedirects(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "httpPathMy":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Endpoint_httpPathMy(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "httpQueriesMy":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Endpoint_httpQueriesMy(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "httpHeadersMy":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Endpoint_httpHeadersMy(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "httpCookiesMy":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Endpoint_httpCookiesMy(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "httpBodyMy":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Endpoint_httpBodyMy(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "match":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Endpoint_match(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "curl":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Endpoint_curl(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "rid":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Endpoint_rid(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "notes":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Endpoint_notes(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var memorySheetImplementors = []string{"MemorySheet"}

func (ec *executionContext) _MemorySheet(ctx context.Context, sel ast.SelectionSet, obj *models.MemorySheet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, memorySheetImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MemorySheet")
		case "id":
			out.Values[i] = ec._MemorySheet_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "value":
			out.Values[i] = ec._MemorySheet_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "alias":
			out.Values[i] = ec._MemorySheet_alias(ctx, field, obj)
		case "createDate":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MemorySheet_createDate(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "currentDate":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MemorySheet_currentDate(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "nextDate":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MemorySheet_nextDate(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "notes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MemorySheet_notes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "helloworld":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_helloworld(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createTag":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTag(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateTag":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTag(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "patchTag":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_patchTag(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteTag":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteTag(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "newEndpoint":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_newEndpoint(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateEndpoint":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateEndpoint(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "patchEndpoint":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_patchEndpoint(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteEndpoint":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteEndpoint(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "importCurl":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_importCurl(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createMemorySheet":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createMemorySheet(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateMemorySheet":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateMemorySheet(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "patchMemorySheet":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_patchMemorySheet(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteMemorySheet":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteMemorySheet(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "runCurl":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_runCurl(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "newNote":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_newNote(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "delNote":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_delNote(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "newProgram":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_newProgram(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateProgram":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateProgram(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "patchProgram":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_patchProgram(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteProgram":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteProgram(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "raw":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_raw(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createWord":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createWord(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateWord":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateWord(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "patchWord":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_patchWord(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteWord":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteWord(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createWordList":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createWordList(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateWordList":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateWordList(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "patchWordList":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_patchWordList(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteWordList":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteWordList(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var myRequestImplementors = []string{"MyRequest"}

func (ec *executionContext) _MyRequest(ctx context.Context, sel ast.SelectionSet, obj *models.MyRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, myRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MyRequest")
		case "id":
			out.Values[i] = ec._MyRequest_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "programId":
			out.Values[i] = ec._MyRequest_programId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "program":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MyRequest_program(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "endpointId":
			out.Values[i] = ec._MyRequest_endpointId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "endpoint":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MyRequest_endpoint(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "requestMethod":
			out.Values[i] = ec._MyRequest_requestMethod(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "requestUrl":
			out.Values[i] = ec._MyRequest_requestUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "requestHeaders":
			out.Values[i] = ec._MyRequest_requestHeaders(ctx, field, obj)
		case "requestBody":
			out.Values[i] = ec._MyRequest_requestBody(ctx, field, obj)
		case "responseStatus":
			out.Values[i] = ec._MyRequest_responseStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "responseHeaders":
			out.Values[i] = ec._MyRequest_responseHeaders(ctx, field, obj)
		case "responseBody":
			out.Values[i] = ec._MyRequest_responseBody(ctx, field, obj)
		case "contentType":
			out.Values[i] = ec._MyRequest_contentType(ctx, field, obj)
		case "contentLength":
			out.Values[i] = ec._MyRequest_contentLength(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "latency":
			out.Values[i] = ec._MyRequest_latency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "size":
			out.Values[i] = ec._MyRequest_size(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "executedAt":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MyRequest_executedAt(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "variables":
			out.Values[i] = ec._MyRequest_variables(ctx, field, obj)
		case "curlCommand":
			out.Values[i] = ec._MyRequest_curlCommand(ctx, field, obj)
		case "error":
			out.Values[i] = ec._MyRequest_error(ctx, field, obj)
		case "success":
			out.Values[i] = ec._MyRequest_success(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var noteImplementors = []string{"Note"}

func (ec *executionContext) _Note(ctx context.Context, sel ast.SelectionSet, obj *models.Note) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, noteImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Note")
		case "id":
			out.Values[i] = ec._Note_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "value":
			out.Values[i] = ec._Note_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "match":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Note_match(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "noteDate":
			out.Values[i] = ec._Note_noteDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var programImplementors = []string{"Program"}

func (ec *executionContext) _Program(ctx context.Context, sel ast.SelectionSet, obj *models.Program) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, programImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Program")
		case "id":
			out.Values[i] = ec._Program_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "alias":
			out.Values[i] = ec._Program_alias(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Program_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._Program_description(ctx, field, obj)
		case "domain":
			out.Values[i] = ec._Program_domain(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "url":
			out.Values[i] = ec._Program_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "match":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Program_match(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "rid":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Program_rid(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "notes":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Program_notes(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "helloworld":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_helloworld(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "tag":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tag(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "tags":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tags(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "endpoint":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_endpoint(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "endpoints":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_endpoints(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "memorySheet":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_memorySheet(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mSheets":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mSheets(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "myRequests":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_myRequests(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "myRequest":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_myRequest(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "notes":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_notes(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "programs":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_programs(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "program":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_program(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "raw":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_raw(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "word":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_word(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "words":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_words(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getWordList":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getWordList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listWordList":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listWordList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryResultImplementors = []string{"QueryResult"}

func (ec *executionContext) _QueryResult(ctx context.Context, sel ast.SelectionSet, obj *models.QueryResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QueryResult")
		case "count":
			out.Values[i] = ec._QueryResult_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "results":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._QueryResult_results(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sQLImplementors = []string{"SQL"}

func (ec *executionContext) _SQL(ctx context.Context, sel ast.SelectionSet, obj *model.SQL) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sQLImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SQL")
		case "delId":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SQL_delId(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "delRid":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SQL_delRid(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "del":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SQL_del(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "count":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SQL_count(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sQLResultImplementors = []string{"SQLResult"}

func (ec *executionContext) _SQLResult(ctx context.Context, sel ast.SelectionSet, obj *model.SQLResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sQLResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SQLResult")
		case "success":
			out.Values[i] = ec._SQLResult_success(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "count":
			out.Values[i] = ec._SQLResult_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var searchResultImplementors = []string{"SearchResult"}

func (ec *executionContext) _SearchResult(ctx context.Context, sel ast.SelectionSet, obj *model.SearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, searchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SearchResult")
		case "results":
			out.Values[i] = ec._SearchResult_results(ctx, field, obj)
		case "count":
			out.Values[i] = ec._SearchResult_count(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tagImplementors = []string{"Tag"}

func (ec *executionContext) _Tag(ctx context.Context, sel ast.SelectionSet, obj *models.Tag) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tagImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Tag")
		case "id":
			out.Values[i] = ec._Tag_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "alias":
			out.Values[i] = ec._Tag_alias(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Tag_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "match":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tag_match(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "description":
			out.Values[i] = ec._Tag_description(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var todayMemorySheetImplementors = []string{"TodayMemorySheet"}

func (ec *executionContext) _TodayMemorySheet(ctx context.Context, sel ast.SelectionSet, obj *model.TodayMemorySheet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, todayMemorySheetImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TodayMemorySheet")
		case "today":
			out.Values[i] = ec._TodayMemorySheet_today(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "sheets":
			out.Values[i] = ec._TodayMemorySheet_sheets(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "nextDay":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TodayMemorySheet_nextDay(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "nextMonth":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TodayMemorySheet_nextMonth(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "thisWeek":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TodayMemorySheet_thisWeek(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "thisMonth":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TodayMemorySheet_thisMonth(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var wordImplementors = []string{"Word"}

func (ec *executionContext) _Word(ctx context.Context, sel ast.SelectionSet, obj *models.Word) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, wordImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Word")
		case "id":
			out.Values[i] = ec._Word_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "word":
			out.Values[i] = ec._Word_word(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "alias":
			out.Values[i] = ec._Word_alias(ctx, field, obj)
		case "wordType":
			out.Values[i] = ec._Word_wordType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._Word_description(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var wordListImplementors = []string{"WordList"}

func (ec *executionContext) _WordList(ctx context.Context, sel ast.SelectionSet, obj *models.WordList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, wordListImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WordList")
		case "id":
			out.Values[i] = ec._WordList_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._WordList_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "alias":
			out.Values[i] = ec._WordList_alias(ctx, field, obj)
		case "description":
			out.Values[i] = ec._WordList_description(ctx, field, obj)
		case "words":
			out.Values[i] = ec._WordList_words(ctx, field, obj)
		case "importUrl":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._WordList_importUrl(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___InputValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___InputValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "isOneOf":
			out.Values[i] = ec.___Type_isOneOf(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAllWordList2ᚕᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐAllWordList(ctx context.Context, sel ast.SelectionSet, v []*models.AllWordList) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAllWordList2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐAllWordList(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNCurlImportResult2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐCurlImportResult(ctx context.Context, sel ast.SelectionSet, v models.CurlImportResult) graphql.Marshaler {
	return ec._CurlImportResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNCurlImportResult2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐCurlImportResult(ctx context.Context, sel ast.SelectionSet, v *models.CurlImportResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CurlImportResult(ctx, sel, v)
}

func (ec *executionContext) marshalNEndpoint2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐEndpoint(ctx context.Context, sel ast.SelectionSet, v models.Endpoint) graphql.Marshaler {
	return ec._Endpoint(ctx, sel, &v)
}

func (ec *executionContext) marshalNEndpoint2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐEndpoint(ctx context.Context, sel ast.SelectionSet, v *models.Endpoint) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Endpoint(ctx, sel, v)
}

func (ec *executionContext) unmarshalNHttpMethod2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐHttpMethod(ctx context.Context, v any) (models.HttpMethod, error) {
	var res models.HttpMethod
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHttpMethod2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐHttpMethod(ctx context.Context, sel ast.SelectionSet, v models.HttpMethod) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNHttpSchema2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐHttpSchema(ctx context.Context, v any) (models.HttpSchema, error) {
	var res models.HttpSchema
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHttpSchema2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐHttpSchema(ctx context.Context, sel ast.SelectionSet, v models.HttpSchema) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v any) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int64(ctx context.Context, v any) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNKVGroup2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNKVGroup2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNMemorySheet2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMemorySheet(ctx context.Context, sel ast.SelectionSet, v models.MemorySheet) graphql.Marshaler {
	return ec._MemorySheet(ctx, sel, &v)
}

func (ec *executionContext) marshalNMemorySheet2ᚕᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMemorySheetᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.MemorySheet) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMemorySheet2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMemorySheet(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMemorySheet2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMemorySheet(ctx context.Context, sel ast.SelectionSet, v *models.MemorySheet) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MemorySheet(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMyDate2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMyDate(ctx context.Context, v any) (models.MyDate, error) {
	var res models.MyDate
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMyDate2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMyDate(ctx context.Context, sel ast.SelectionSet, v models.MyDate) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNMyDate2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMyDate(ctx context.Context, v any) (*models.MyDate, error) {
	var res = new(models.MyDate)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMyDate2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMyDate(ctx context.Context, sel ast.SelectionSet, v *models.MyDate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalNMyRequest2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMyRequest(ctx context.Context, sel ast.SelectionSet, v models.MyRequest) graphql.Marshaler {
	return ec._MyRequest(ctx, sel, &v)
}

func (ec *executionContext) marshalNMyRequest2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMyRequest(ctx context.Context, sel ast.SelectionSet, v *models.MyRequest) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MyRequest(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMyString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMyString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNMyString2ᚕᚖstring(ctx context.Context, v any) ([]*string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOMyString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNMyString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOMyString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNNewEndpoint2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNewEndpoint(ctx context.Context, v any) (models.NewEndpoint, error) {
	res, err := ec.unmarshalInputNewEndpoint(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewMemorySheet2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNewMemorySheet(ctx context.Context, v any) (models.NewMemorySheet, error) {
	res, err := ec.unmarshalInputNewMemorySheet(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewProgram2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNewProgram(ctx context.Context, v any) (models.NewProgram, error) {
	res, err := ec.unmarshalInputNewProgram(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewTag2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNewTag(ctx context.Context, v any) (models.NewTag, error) {
	res, err := ec.unmarshalInputNewTag(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewWord2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNewWord(ctx context.Context, v any) (models.NewWord, error) {
	res, err := ec.unmarshalInputNewWord(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewWordList2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNewWordList(ctx context.Context, v any) (models.NewWordList, error) {
	res, err := ec.unmarshalInputNewWordList(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNote2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNote(ctx context.Context, sel ast.SelectionSet, v models.Note) graphql.Marshaler {
	return ec._Note(ctx, sel, &v)
}

func (ec *executionContext) marshalNNote2ᚕᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNoteᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Note) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNote2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNote(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNNote2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNote(ctx context.Context, sel ast.SelectionSet, v *models.Note) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Note(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPatchEndpoint2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐPatchEndpoint(ctx context.Context, v any) (models.PatchEndpoint, error) {
	res, err := ec.unmarshalInputPatchEndpoint(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPatchMemorySheet2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐPatchMemorySheet(ctx context.Context, v any) (models.PatchMemorySheet, error) {
	res, err := ec.unmarshalInputPatchMemorySheet(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPatchProgram2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐPatchProgram(ctx context.Context, v any) (models.PatchProgram, error) {
	res, err := ec.unmarshalInputPatchProgram(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPatchTag2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐPatchTag(ctx context.Context, v any) (models.PatchTag, error) {
	res, err := ec.unmarshalInputPatchTag(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPatchWord2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐPatchWord(ctx context.Context, v any) (models.PatchWord, error) {
	res, err := ec.unmarshalInputPatchWord(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPatchWordList2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐPatchWordList(ctx context.Context, v any) (models.PatchWordList, error) {
	res, err := ec.unmarshalInputPatchWordList(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProgram2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐProgram(ctx context.Context, sel ast.SelectionSet, v models.Program) graphql.Marshaler {
	return ec._Program(ctx, sel, &v)
}

func (ec *executionContext) marshalNProgram2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐProgram(ctx context.Context, sel ast.SelectionSet, v *models.Program) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Program(ctx, sel, v)
}

func (ec *executionContext) marshalNQueryResult2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐQueryResult(ctx context.Context, sel ast.SelectionSet, v models.QueryResult) graphql.Marshaler {
	return ec._QueryResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNQueryResult2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐQueryResult(ctx context.Context, sel ast.SelectionSet, v *models.QueryResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._QueryResult(ctx, sel, v)
}

func (ec *executionContext) marshalNSearchResult2githubᚗcomᚋlinn221ᚋbaneᚋgraphᚋmodelᚐSearchResult(ctx context.Context, sel ast.SelectionSet, v model.SearchResult) graphql.Marshaler {
	return ec._SearchResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNSearchResult2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋgraphᚋmodelᚐSearchResult(ctx context.Context, sel ast.SelectionSet, v *model.SearchResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SearchResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNTag2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐTag(ctx context.Context, sel ast.SelectionSet, v models.Tag) graphql.Marshaler {
	return ec._Tag(ctx, sel, &v)
}

func (ec *executionContext) marshalNTag2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐTag(ctx context.Context, sel ast.SelectionSet, v *models.Tag) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Tag(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVarKVGroup2githubᚗcomᚋlinn221ᚋbaneᚋmystructsᚐVarKVGroup(ctx context.Context, v any) (mystructs.VarKVGroup, error) {
	var res mystructs.VarKVGroup
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVarKVGroup2githubᚗcomᚋlinn221ᚋbaneᚋmystructsᚐVarKVGroup(ctx context.Context, sel ast.SelectionSet, v mystructs.VarKVGroup) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNVarString2githubᚗcomᚋlinn221ᚋbaneᚋmystructsᚐVarString(ctx context.Context, v any) (mystructs.VarString, error) {
	var res mystructs.VarString
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVarString2githubᚗcomᚋlinn221ᚋbaneᚋmystructsᚐVarString(ctx context.Context, sel ast.SelectionSet, v mystructs.VarString) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNWord2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐWord(ctx context.Context, sel ast.SelectionSet, v models.Word) graphql.Marshaler {
	return ec._Word(ctx, sel, &v)
}

func (ec *executionContext) marshalNWord2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐWord(ctx context.Context, sel ast.SelectionSet, v *models.Word) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Word(ctx, sel, v)
}

func (ec *executionContext) marshalNWordList2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐWordList(ctx context.Context, sel ast.SelectionSet, v models.WordList) graphql.Marshaler {
	return ec._WordList(ctx, sel, &v)
}

func (ec *executionContext) marshalNWordList2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐWordList(ctx context.Context, sel ast.SelectionSet, v *models.WordList) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._WordList(ctx, sel, v)
}

func (ec *executionContext) unmarshalNWordType2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐWordType(ctx context.Context, v any) (models.WordType, error) {
	var res models.WordType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNWordType2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐWordType(ctx context.Context, sel ast.SelectionSet, v models.WordType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOAllWordList2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐAllWordList(ctx context.Context, sel ast.SelectionSet, v *models.AllWordList) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AllWordList(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v any) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOEndpoint2ᚕᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐEndpoint(ctx context.Context, sel ast.SelectionSet, v []*models.Endpoint) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOEndpoint2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐEndpoint(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOEndpoint2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐEndpoint(ctx context.Context, sel ast.SelectionSet, v *models.Endpoint) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Endpoint(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEndpointFilter2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐEndpointFilter(ctx context.Context, v any) (*models.EndpointFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEndpointFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOHttpMethod2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐHttpMethod(ctx context.Context, v any) (models.HttpMethod, error) {
	var res models.HttpMethod
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOHttpMethod2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐHttpMethod(ctx context.Context, sel ast.SelectionSet, v models.HttpMethod) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOHttpMethod2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐHttpMethod(ctx context.Context, v any) (*models.HttpMethod, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.HttpMethod)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOHttpMethod2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐHttpMethod(ctx context.Context, sel ast.SelectionSet, v *models.HttpMethod) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOHttpSchema2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐHttpSchema(ctx context.Context, v any) (models.HttpSchema, error) {
	var res models.HttpSchema
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOHttpSchema2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐHttpSchema(ctx context.Context, sel ast.SelectionSet, v models.HttpSchema) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOHttpSchema2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐHttpSchema(ctx context.Context, v any) (*models.HttpSchema, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.HttpSchema)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOHttpSchema2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐHttpSchema(ctx context.Context, sel ast.SelectionSet, v *models.HttpSchema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOInt2int(ctx context.Context, v any) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	_ = sel
	_ = ctx
	res := graphql.MarshalInt(v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v any) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOMyDate2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMyDate(ctx context.Context, v any) (models.MyDate, error) {
	var res models.MyDate
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMyDate2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMyDate(ctx context.Context, sel ast.SelectionSet, v models.MyDate) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOMyDate2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMyDate(ctx context.Context, v any) (*models.MyDate, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.MyDate)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMyDate2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMyDate(ctx context.Context, sel ast.SelectionSet, v *models.MyDate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOMyRequest2ᚕᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMyRequest(ctx context.Context, sel ast.SelectionSet, v []*models.MyRequest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMyRequest2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMyRequest(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOMyRequest2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMyRequest(ctx context.Context, sel ast.SelectionSet, v *models.MyRequest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MyRequest(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMyRequestFilter2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐMyRequestFilter(ctx context.Context, v any) (*models.MyRequestFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMyRequestFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMyString2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMyString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalONewNote2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNewNote(ctx context.Context, v any) (*models.NewNote, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNewNote(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalONewProgram2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNewProgram(ctx context.Context, v any) (*models.NewProgram, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNewProgram(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONote2ᚕᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNote(ctx context.Context, sel ast.SelectionSet, v []*models.Note) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONote2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNote(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalONote2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNote(ctx context.Context, sel ast.SelectionSet, v *models.Note) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Note(ctx, sel, v)
}

func (ec *executionContext) unmarshalONoteFilter2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐNoteFilter(ctx context.Context, v any) (*models.NoteFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNoteFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProgram2ᚕᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐProgram(ctx context.Context, sel ast.SelectionSet, v []*models.Program) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProgram2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐProgram(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOProgram2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐProgram(ctx context.Context, sel ast.SelectionSet, v *models.Program) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Program(ctx, sel, v)
}

func (ec *executionContext) marshalOSQLResult2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋgraphᚋmodelᚐSQLResult(ctx context.Context, sel ast.SelectionSet, v *model.SQLResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SQLResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	_ = ctx
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOTag2ᚕᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐTag(ctx context.Context, sel ast.SelectionSet, v []*models.Tag) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTag2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐTag(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTag2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐTag(ctx context.Context, sel ast.SelectionSet, v *models.Tag) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Tag(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVarKVGroup2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmystructsᚐVarKVGroup(ctx context.Context, v any) (*mystructs.VarKVGroup, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(mystructs.VarKVGroup)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVarKVGroup2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmystructsᚐVarKVGroup(ctx context.Context, sel ast.SelectionSet, v *mystructs.VarKVGroup) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOVarString2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmystructsᚐVarString(ctx context.Context, v any) (*mystructs.VarString, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(mystructs.VarString)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVarString2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmystructsᚐVarString(ctx context.Context, sel ast.SelectionSet, v *mystructs.VarString) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOWord2ᚕgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐWordᚄ(ctx context.Context, sel ast.SelectionSet, v []models.Word) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWord2githubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐWord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOWord2ᚕᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐWord(ctx context.Context, sel ast.SelectionSet, v []*models.Word) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOWord2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐWord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOWord2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐWord(ctx context.Context, sel ast.SelectionSet, v *models.Word) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Word(ctx, sel, v)
}

func (ec *executionContext) unmarshalOWordType2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐWordType(ctx context.Context, v any) (*models.WordType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.WordType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOWordType2ᚖgithubᚗcomᚋlinn221ᚋbaneᚋmodelsᚐWordType(ctx context.Context, sel ast.SelectionSet, v *models.WordType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
